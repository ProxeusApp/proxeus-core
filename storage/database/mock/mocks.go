// Code generated by MockGen. DO NOT EDIT.
// Source: storage/interfaces.go

package mock

import (
	externalnode "github.com/ProxeusApp/proxeus-core/externalnode"
	file "github.com/ProxeusApp/proxeus-core/sys/file"
	model "github.com/ProxeusApp/proxeus-core/sys/model"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
	time "time"
)

// MockSettingsIF is a mock of SettingsIF interface
type MockSettingsIF struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsIFMockRecorder
}

// MockSettingsIFMockRecorder is the mock recorder for MockSettingsIF
type MockSettingsIFMockRecorder struct {
	mock *MockSettingsIF
}

// NewMockSettingsIF creates a new mock instance
func NewMockSettingsIF(ctrl *gomock.Controller) *MockSettingsIF {
	mock := &MockSettingsIF{ctrl: ctrl}
	mock.recorder = &MockSettingsIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSettingsIF) EXPECT() *MockSettingsIFMockRecorder {
	return _m.recorder
}

// Put mocks base method
func (_m *MockSettingsIF) Put(stngs *model.Settings) error {
	ret := _m.ctrl.Call(_m, "Put", stngs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (_mr *MockSettingsIFMockRecorder) Put(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Put", reflect.TypeOf((*MockSettingsIF)(nil).Put), arg0)
}

// Get mocks base method
func (_m *MockSettingsIF) Get() (*model.Settings, error) {
	ret := _m.ctrl.Call(_m, "Get")
	ret0, _ := ret[0].(*model.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockSettingsIFMockRecorder) Get() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockSettingsIF)(nil).Get))
}

// Close mocks base method
func (_m *MockSettingsIF) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockSettingsIFMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockSettingsIF)(nil).Close))
}

// MockI18nIF is a mock of I18nIF interface
type MockI18nIF struct {
	ctrl     *gomock.Controller
	recorder *MockI18nIFMockRecorder
}

// MockI18nIFMockRecorder is the mock recorder for MockI18nIF
type MockI18nIFMockRecorder struct {
	mock *MockI18nIF
}

// NewMockI18nIF creates a new mock instance
func NewMockI18nIF(ctrl *gomock.Controller) *MockI18nIF {
	mock := &MockI18nIF{ctrl: ctrl}
	mock.recorder = &MockI18nIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockI18nIF) EXPECT() *MockI18nIFMockRecorder {
	return _m.recorder
}

// Find mocks base method
func (_m *MockI18nIF) Find(keyContains string, valueContains string, options Options) (map[string]map[string]string, error) {
	ret := _m.ctrl.Call(_m, "Find", keyContains, valueContains, options)
	ret0, _ := ret[0].(map[string]map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (_mr *MockI18nIFMockRecorder) Find(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Find", reflect.TypeOf((*MockI18nIF)(nil).Find), arg0, arg1, arg2)
}

// Get mocks base method
func (_m *MockI18nIF) Get(lang string, key string, args ...string) (string, error) {
	_s := []interface{}{lang, key}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Get", _s...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockI18nIFMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockI18nIF)(nil).Get), _s...)
}

// GetAll mocks base method
func (_m *MockI18nIF) GetAll(lang string) (map[string]string, error) {
	ret := _m.ctrl.Call(_m, "GetAll", lang)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (_mr *MockI18nIFMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetAll", reflect.TypeOf((*MockI18nIF)(nil).GetAll), arg0)
}

// PutAll mocks base method
func (_m *MockI18nIF) PutAll(lang string, translations map[string]string) error {
	ret := _m.ctrl.Call(_m, "PutAll", lang, translations)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutAll indicates an expected call of PutAll
func (_mr *MockI18nIFMockRecorder) PutAll(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PutAll", reflect.TypeOf((*MockI18nIF)(nil).PutAll), arg0, arg1)
}

// Put mocks base method
func (_m *MockI18nIF) Put(lang string, key string, text string) error {
	ret := _m.ctrl.Call(_m, "Put", lang, key, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (_mr *MockI18nIFMockRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Put", reflect.TypeOf((*MockI18nIF)(nil).Put), arg0, arg1, arg2)
}

// PutLang mocks base method
func (_m *MockI18nIF) PutLang(lang string, enabled bool) error {
	ret := _m.ctrl.Call(_m, "PutLang", lang, enabled)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutLang indicates an expected call of PutLang
func (_mr *MockI18nIFMockRecorder) PutLang(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PutLang", reflect.TypeOf((*MockI18nIF)(nil).PutLang), arg0, arg1)
}

// GetLangs mocks base method
func (_m *MockI18nIF) GetLangs(enabled bool) ([]*model.Lang, error) {
	ret := _m.ctrl.Call(_m, "GetLangs", enabled)
	ret0, _ := ret[0].([]*model.Lang)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLangs indicates an expected call of GetLangs
func (_mr *MockI18nIFMockRecorder) GetLangs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetLangs", reflect.TypeOf((*MockI18nIF)(nil).GetLangs), arg0)
}

// HasLang mocks base method
func (_m *MockI18nIF) HasLang(lang string) bool {
	ret := _m.ctrl.Call(_m, "HasLang", lang)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasLang indicates an expected call of HasLang
func (_mr *MockI18nIFMockRecorder) HasLang(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "HasLang", reflect.TypeOf((*MockI18nIF)(nil).HasLang), arg0)
}

// GetAllLangs mocks base method
func (_m *MockI18nIF) GetAllLangs() ([]*model.Lang, error) {
	ret := _m.ctrl.Call(_m, "GetAllLangs")
	ret0, _ := ret[0].([]*model.Lang)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLangs indicates an expected call of GetAllLangs
func (_mr *MockI18nIFMockRecorder) GetAllLangs() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetAllLangs", reflect.TypeOf((*MockI18nIF)(nil).GetAllLangs))
}

// PutFallback mocks base method
func (_m *MockI18nIF) PutFallback(lang string) error {
	ret := _m.ctrl.Call(_m, "PutFallback", lang)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutFallback indicates an expected call of PutFallback
func (_mr *MockI18nIFMockRecorder) PutFallback(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PutFallback", reflect.TypeOf((*MockI18nIF)(nil).PutFallback), arg0)
}

// GetFallback mocks base method
func (_m *MockI18nIF) GetFallback() (string, error) {
	ret := _m.ctrl.Call(_m, "GetFallback")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFallback indicates an expected call of GetFallback
func (_mr *MockI18nIFMockRecorder) GetFallback() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetFallback", reflect.TypeOf((*MockI18nIF)(nil).GetFallback))
}

// Close mocks base method
func (_m *MockI18nIF) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockI18nIFMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockI18nIF)(nil).Close))
}

// MockFormIF is a mock of FormIF interface
type MockFormIF struct {
	ctrl     *gomock.Controller
	recorder *MockFormIFMockRecorder
}

// MockFormIFMockRecorder is the mock recorder for MockFormIF
type MockFormIFMockRecorder struct {
	mock *MockFormIF
}

// NewMockFormIF creates a new mock instance
func NewMockFormIF(ctrl *gomock.Controller) *MockFormIF {
	mock := &MockFormIF{ctrl: ctrl}
	mock.recorder = &MockFormIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockFormIF) EXPECT() *MockFormIFMockRecorder {
	return _m.recorder
}

// List mocks base method
func (_m *MockFormIF) List(auth model.Auth, contains string, options Options) ([]*model.FormItem, error) {
	ret := _m.ctrl.Call(_m, "List", auth, contains, options)
	ret0, _ := ret[0].([]*model.FormItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockFormIFMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockFormIF)(nil).List), arg0, arg1, arg2)
}

// Get mocks base method
func (_m *MockFormIF) Get(auth model.Auth, id string) (*model.FormItem, error) {
	ret := _m.ctrl.Call(_m, "Get", auth, id)
	ret0, _ := ret[0].(*model.FormItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockFormIFMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockFormIF)(nil).Get), arg0, arg1)
}

// Put mocks base method
func (_m *MockFormIF) Put(auth model.Auth, item *model.FormItem) error {
	ret := _m.ctrl.Call(_m, "Put", auth, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (_mr *MockFormIFMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Put", reflect.TypeOf((*MockFormIF)(nil).Put), arg0, arg1)
}

// Delete mocks base method
func (_m *MockFormIF) Delete(auth model.Auth, id string) error {
	ret := _m.ctrl.Call(_m, "Delete", auth, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockFormIFMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockFormIF)(nil).Delete), arg0, arg1)
}

// DelComp mocks base method
func (_m *MockFormIF) DelComp(auth model.Auth, id string) error {
	ret := _m.ctrl.Call(_m, "DelComp", auth, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelComp indicates an expected call of DelComp
func (_mr *MockFormIFMockRecorder) DelComp(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DelComp", reflect.TypeOf((*MockFormIF)(nil).DelComp), arg0, arg1)
}

// PutComp mocks base method
func (_m *MockFormIF) PutComp(auth model.Auth, comp *model.FormComponentItem) error {
	ret := _m.ctrl.Call(_m, "PutComp", auth, comp)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutComp indicates an expected call of PutComp
func (_mr *MockFormIFMockRecorder) PutComp(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PutComp", reflect.TypeOf((*MockFormIF)(nil).PutComp), arg0, arg1)
}

// GetComp mocks base method
func (_m *MockFormIF) GetComp(auth model.Auth, id string) (*model.FormComponentItem, error) {
	ret := _m.ctrl.Call(_m, "GetComp", auth, id)
	ret0, _ := ret[0].(*model.FormComponentItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComp indicates an expected call of GetComp
func (_mr *MockFormIFMockRecorder) GetComp(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetComp", reflect.TypeOf((*MockFormIF)(nil).GetComp), arg0, arg1)
}

// ListComp mocks base method
func (_m *MockFormIF) ListComp(auth model.Auth, contains string, options Options) (map[string]*model.FormComponentItem, error) {
	ret := _m.ctrl.Call(_m, "ListComp", auth, contains, options)
	ret0, _ := ret[0].(map[string]*model.FormComponentItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComp indicates an expected call of ListComp
func (_mr *MockFormIFMockRecorder) ListComp(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ListComp", reflect.TypeOf((*MockFormIF)(nil).ListComp), arg0, arg1, arg2)
}

// Vars mocks base method
func (_m *MockFormIF) Vars(auth model.Auth, contains string, options Options) ([]string, error) {
	ret := _m.ctrl.Call(_m, "Vars", auth, contains, options)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Vars indicates an expected call of Vars
func (_mr *MockFormIFMockRecorder) Vars(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Vars", reflect.TypeOf((*MockFormIF)(nil).Vars), arg0, arg1, arg2)
}

// Close mocks base method
func (_m *MockFormIF) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockFormIFMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockFormIF)(nil).Close))
}

// MockWorkflowIF is a mock of WorkflowIF interface
type MockWorkflowIF struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowIFMockRecorder
}

// MockWorkflowIFMockRecorder is the mock recorder for MockWorkflowIF
type MockWorkflowIFMockRecorder struct {
	mock *MockWorkflowIF
}

// NewMockWorkflowIF creates a new mock instance
func NewMockWorkflowIF(ctrl *gomock.Controller) *MockWorkflowIF {
	mock := &MockWorkflowIF{ctrl: ctrl}
	mock.recorder = &MockWorkflowIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockWorkflowIF) EXPECT() *MockWorkflowIFMockRecorder {
	return _m.recorder
}

// ListPublished mocks base method
func (_m *MockWorkflowIF) ListPublished(auth model.Auth, contains string, options Options) ([]*model.WorkflowItem, error) {
	ret := _m.ctrl.Call(_m, "ListPublished", auth, contains, options)
	ret0, _ := ret[0].([]*model.WorkflowItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublished indicates an expected call of ListPublished
func (_mr *MockWorkflowIFMockRecorder) ListPublished(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ListPublished", reflect.TypeOf((*MockWorkflowIF)(nil).ListPublished), arg0, arg1, arg2)
}

// List mocks base method
func (_m *MockWorkflowIF) List(auth model.Auth, contains string, options Options) ([]*model.WorkflowItem, error) {
	ret := _m.ctrl.Call(_m, "List", auth, contains, options)
	ret0, _ := ret[0].([]*model.WorkflowItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockWorkflowIFMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockWorkflowIF)(nil).List), arg0, arg1, arg2)
}

// GetPublished mocks base method
func (_m *MockWorkflowIF) GetPublished(auth model.Auth, id string) (*model.WorkflowItem, error) {
	ret := _m.ctrl.Call(_m, "GetPublished", auth, id)
	ret0, _ := ret[0].(*model.WorkflowItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublished indicates an expected call of GetPublished
func (_mr *MockWorkflowIFMockRecorder) GetPublished(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetPublished", reflect.TypeOf((*MockWorkflowIF)(nil).GetPublished), arg0, arg1)
}

// Get mocks base method
func (_m *MockWorkflowIF) Get(auth model.Auth, id string) (*model.WorkflowItem, error) {
	ret := _m.ctrl.Call(_m, "Get", auth, id)
	ret0, _ := ret[0].(*model.WorkflowItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockWorkflowIFMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockWorkflowIF)(nil).Get), arg0, arg1)
}

// GetList mocks base method
func (_m *MockWorkflowIF) GetList(auth model.Auth, id []string) ([]*model.WorkflowItem, error) {
	ret := _m.ctrl.Call(_m, "GetList", auth, id)
	ret0, _ := ret[0].([]*model.WorkflowItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList
func (_mr *MockWorkflowIFMockRecorder) GetList(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetList", reflect.TypeOf((*MockWorkflowIF)(nil).GetList), arg0, arg1)
}

// Put mocks base method
func (_m *MockWorkflowIF) Put(auth model.Auth, item *model.WorkflowItem) error {
	ret := _m.ctrl.Call(_m, "Put", auth, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (_mr *MockWorkflowIFMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Put", reflect.TypeOf((*MockWorkflowIF)(nil).Put), arg0, arg1)
}

// Delete mocks base method
func (_m *MockWorkflowIF) Delete(auth model.Auth, id string) error {
	ret := _m.ctrl.Call(_m, "Delete", auth, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockWorkflowIFMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockWorkflowIF)(nil).Delete), arg0, arg1)
}

// Close mocks base method
func (_m *MockWorkflowIF) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockWorkflowIFMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockWorkflowIF)(nil).Close))
}

// RegisterExternalNode mocks base method
func (_m *MockWorkflowIF) RegisterExternalNode(auth model.Auth, n *externalnode.ExternalNode) error {
	ret := _m.ctrl.Call(_m, "RegisterExternalNode", auth, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterExternalNode indicates an expected call of RegisterExternalNode
func (_mr *MockWorkflowIFMockRecorder) RegisterExternalNode(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RegisterExternalNode", reflect.TypeOf((*MockWorkflowIF)(nil).RegisterExternalNode), arg0, arg1)
}

// ListExternalNodes mocks base method
func (_m *MockWorkflowIF) ListExternalNodes() []*externalnode.ExternalNode {
	ret := _m.ctrl.Call(_m, "ListExternalNodes")
	ret0, _ := ret[0].([]*externalnode.ExternalNode)
	return ret0
}

// ListExternalNodes indicates an expected call of ListExternalNodes
func (_mr *MockWorkflowIFMockRecorder) ListExternalNodes() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ListExternalNodes", reflect.TypeOf((*MockWorkflowIF)(nil).ListExternalNodes))
}

// DeleteExternalNode mocks base method
func (_m *MockWorkflowIF) DeleteExternalNode(auth model.Auth, id string) error {
	ret := _m.ctrl.Call(_m, "DeleteExternalNode", auth, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExternalNode indicates an expected call of DeleteExternalNode
func (_mr *MockWorkflowIFMockRecorder) DeleteExternalNode(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteExternalNode", reflect.TypeOf((*MockWorkflowIF)(nil).DeleteExternalNode), arg0, arg1)
}

// NodeByName mocks base method
func (_m *MockWorkflowIF) NodeByName(auth model.Auth, name string) (*externalnode.ExternalNode, error) {
	ret := _m.ctrl.Call(_m, "NodeByName", auth, name)
	ret0, _ := ret[0].(*externalnode.ExternalNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeByName indicates an expected call of NodeByName
func (_mr *MockWorkflowIFMockRecorder) NodeByName(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NodeByName", reflect.TypeOf((*MockWorkflowIF)(nil).NodeByName), arg0, arg1)
}

// QueryFromInstanceID mocks base method
func (_m *MockWorkflowIF) QueryFromInstanceID(auth model.Auth, id string) (externalnode.ExternalQuery, error) {
	ret := _m.ctrl.Call(_m, "QueryFromInstanceID", auth, id)
	ret0, _ := ret[0].(externalnode.ExternalQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFromInstanceID indicates an expected call of QueryFromInstanceID
func (_mr *MockWorkflowIFMockRecorder) QueryFromInstanceID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "QueryFromInstanceID", reflect.TypeOf((*MockWorkflowIF)(nil).QueryFromInstanceID), arg0, arg1)
}

// PutExternalNodeInstance mocks base method
func (_m *MockWorkflowIF) PutExternalNodeInstance(auth model.Auth, i *externalnode.ExternalNodeInstance) error {
	ret := _m.ctrl.Call(_m, "PutExternalNodeInstance", auth, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutExternalNodeInstance indicates an expected call of PutExternalNodeInstance
func (_mr *MockWorkflowIFMockRecorder) PutExternalNodeInstance(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PutExternalNodeInstance", reflect.TypeOf((*MockWorkflowIF)(nil).PutExternalNodeInstance), arg0, arg1)
}

// MockExternalNodeIF is a mock of ExternalNodeIF interface
type MockExternalNodeIF struct {
	ctrl     *gomock.Controller
	recorder *MockExternalNodeIFMockRecorder
}

// MockExternalNodeIFMockRecorder is the mock recorder for MockExternalNodeIF
type MockExternalNodeIFMockRecorder struct {
	mock *MockExternalNodeIF
}

// NewMockExternalNodeIF creates a new mock instance
func NewMockExternalNodeIF(ctrl *gomock.Controller) *MockExternalNodeIF {
	mock := &MockExternalNodeIF{ctrl: ctrl}
	mock.recorder = &MockExternalNodeIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockExternalNodeIF) EXPECT() *MockExternalNodeIFMockRecorder {
	return _m.recorder
}

// RegisterExternalNode mocks base method
func (_m *MockExternalNodeIF) RegisterExternalNode(auth model.Auth, n *externalnode.ExternalNode) error {
	ret := _m.ctrl.Call(_m, "RegisterExternalNode", auth, n)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterExternalNode indicates an expected call of RegisterExternalNode
func (_mr *MockExternalNodeIFMockRecorder) RegisterExternalNode(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RegisterExternalNode", reflect.TypeOf((*MockExternalNodeIF)(nil).RegisterExternalNode), arg0, arg1)
}

// ListExternalNodes mocks base method
func (_m *MockExternalNodeIF) ListExternalNodes() []*externalnode.ExternalNode {
	ret := _m.ctrl.Call(_m, "ListExternalNodes")
	ret0, _ := ret[0].([]*externalnode.ExternalNode)
	return ret0
}

// ListExternalNodes indicates an expected call of ListExternalNodes
func (_mr *MockExternalNodeIFMockRecorder) ListExternalNodes() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ListExternalNodes", reflect.TypeOf((*MockExternalNodeIF)(nil).ListExternalNodes))
}

// DeleteExternalNode mocks base method
func (_m *MockExternalNodeIF) DeleteExternalNode(auth model.Auth, id string) error {
	ret := _m.ctrl.Call(_m, "DeleteExternalNode", auth, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExternalNode indicates an expected call of DeleteExternalNode
func (_mr *MockExternalNodeIFMockRecorder) DeleteExternalNode(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteExternalNode", reflect.TypeOf((*MockExternalNodeIF)(nil).DeleteExternalNode), arg0, arg1)
}

// NodeByName mocks base method
func (_m *MockExternalNodeIF) NodeByName(auth model.Auth, name string) (*externalnode.ExternalNode, error) {
	ret := _m.ctrl.Call(_m, "NodeByName", auth, name)
	ret0, _ := ret[0].(*externalnode.ExternalNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeByName indicates an expected call of NodeByName
func (_mr *MockExternalNodeIFMockRecorder) NodeByName(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NodeByName", reflect.TypeOf((*MockExternalNodeIF)(nil).NodeByName), arg0, arg1)
}

// QueryFromInstanceID mocks base method
func (_m *MockExternalNodeIF) QueryFromInstanceID(auth model.Auth, id string) (externalnode.ExternalQuery, error) {
	ret := _m.ctrl.Call(_m, "QueryFromInstanceID", auth, id)
	ret0, _ := ret[0].(externalnode.ExternalQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFromInstanceID indicates an expected call of QueryFromInstanceID
func (_mr *MockExternalNodeIFMockRecorder) QueryFromInstanceID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "QueryFromInstanceID", reflect.TypeOf((*MockExternalNodeIF)(nil).QueryFromInstanceID), arg0, arg1)
}

// PutExternalNodeInstance mocks base method
func (_m *MockExternalNodeIF) PutExternalNodeInstance(auth model.Auth, i *externalnode.ExternalNodeInstance) error {
	ret := _m.ctrl.Call(_m, "PutExternalNodeInstance", auth, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutExternalNodeInstance indicates an expected call of PutExternalNodeInstance
func (_mr *MockExternalNodeIFMockRecorder) PutExternalNodeInstance(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PutExternalNodeInstance", reflect.TypeOf((*MockExternalNodeIF)(nil).PutExternalNodeInstance), arg0, arg1)
}

// MockTemplateIF is a mock of TemplateIF interface
type MockTemplateIF struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateIFMockRecorder
}

// MockTemplateIFMockRecorder is the mock recorder for MockTemplateIF
type MockTemplateIFMockRecorder struct {
	mock *MockTemplateIF
}

// NewMockTemplateIF creates a new mock instance
func NewMockTemplateIF(ctrl *gomock.Controller) *MockTemplateIF {
	mock := &MockTemplateIF{ctrl: ctrl}
	mock.recorder = &MockTemplateIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTemplateIF) EXPECT() *MockTemplateIFMockRecorder {
	return _m.recorder
}

// List mocks base method
func (_m *MockTemplateIF) List(auth model.Auth, contains string, options Options) ([]*model.TemplateItem, error) {
	ret := _m.ctrl.Call(_m, "List", auth, contains, options)
	ret0, _ := ret[0].([]*model.TemplateItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockTemplateIFMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockTemplateIF)(nil).List), arg0, arg1, arg2)
}

// Get mocks base method
func (_m *MockTemplateIF) Get(auth model.Auth, id string) (*model.TemplateItem, error) {
	ret := _m.ctrl.Call(_m, "Get", auth, id)
	ret0, _ := ret[0].(*model.TemplateItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockTemplateIFMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockTemplateIF)(nil).Get), arg0, arg1)
}

// ProvideFileInfoFor mocks base method
func (_m *MockTemplateIF) ProvideFileInfoFor(auth model.Auth, id string, lang string, fm *file.Meta) (*file.IO, error) {
	ret := _m.ctrl.Call(_m, "ProvideFileInfoFor", auth, id, lang, fm)
	ret0, _ := ret[0].(*file.IO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvideFileInfoFor indicates an expected call of ProvideFileInfoFor
func (_mr *MockTemplateIFMockRecorder) ProvideFileInfoFor(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ProvideFileInfoFor", reflect.TypeOf((*MockTemplateIF)(nil).ProvideFileInfoFor), arg0, arg1, arg2, arg3)
}

// PutVars mocks base method
func (_m *MockTemplateIF) PutVars(auth model.Auth, id string, lang string, vars []string) error {
	ret := _m.ctrl.Call(_m, "PutVars", auth, id, lang, vars)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutVars indicates an expected call of PutVars
func (_mr *MockTemplateIFMockRecorder) PutVars(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PutVars", reflect.TypeOf((*MockTemplateIF)(nil).PutVars), arg0, arg1, arg2, arg3)
}

// GetTemplate mocks base method
func (_m *MockTemplateIF) GetTemplate(auth model.Auth, id string, lang string) (*file.IO, error) {
	ret := _m.ctrl.Call(_m, "GetTemplate", auth, id, lang)
	ret0, _ := ret[0].(*file.IO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate
func (_mr *MockTemplateIFMockRecorder) GetTemplate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetTemplate", reflect.TypeOf((*MockTemplateIF)(nil).GetTemplate), arg0, arg1, arg2)
}

// DeleteTemplate mocks base method
func (_m *MockTemplateIF) DeleteTemplate(auth model.Auth, files FilesIF, id string, lang string) error {
	ret := _m.ctrl.Call(_m, "DeleteTemplate", auth, files, id, lang)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTemplate indicates an expected call of DeleteTemplate
func (_mr *MockTemplateIFMockRecorder) DeleteTemplate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteTemplate", reflect.TypeOf((*MockTemplateIF)(nil).DeleteTemplate), arg0, arg1, arg2, arg3)
}

// Put mocks base method
func (_m *MockTemplateIF) Put(auth model.Auth, item *model.TemplateItem) error {
	ret := _m.ctrl.Call(_m, "Put", auth, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (_mr *MockTemplateIFMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Put", reflect.TypeOf((*MockTemplateIF)(nil).Put), arg0, arg1)
}

// Delete mocks base method
func (_m *MockTemplateIF) Delete(auth model.Auth, files FilesIF, id string) error {
	ret := _m.ctrl.Call(_m, "Delete", auth, files, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockTemplateIFMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockTemplateIF)(nil).Delete), arg0, arg1, arg2)
}

// Vars mocks base method
func (_m *MockTemplateIF) Vars(auth model.Auth, contains string, options Options) ([]string, error) {
	ret := _m.ctrl.Call(_m, "Vars", auth, contains, options)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Vars indicates an expected call of Vars
func (_mr *MockTemplateIFMockRecorder) Vars(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Vars", reflect.TypeOf((*MockTemplateIF)(nil).Vars), arg0, arg1, arg2)
}

// AssetsKey mocks base method
func (_m *MockTemplateIF) AssetsKey() string {
	ret := _m.ctrl.Call(_m, "AssetsKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// AssetsKey indicates an expected call of AssetsKey
func (_mr *MockTemplateIFMockRecorder) AssetsKey() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AssetsKey", reflect.TypeOf((*MockTemplateIF)(nil).AssetsKey))
}

// Close mocks base method
func (_m *MockTemplateIF) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockTemplateIFMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockTemplateIF)(nil).Close))
}

// MockUserIF is a mock of UserIF interface
type MockUserIF struct {
	ctrl     *gomock.Controller
	recorder *MockUserIFMockRecorder
}

// MockUserIFMockRecorder is the mock recorder for MockUserIF
type MockUserIFMockRecorder struct {
	mock *MockUserIF
}

// NewMockUserIF creates a new mock instance
func NewMockUserIF(ctrl *gomock.Controller) *MockUserIF {
	mock := &MockUserIF{ctrl: ctrl}
	mock.recorder = &MockUserIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockUserIF) EXPECT() *MockUserIFMockRecorder {
	return _m.recorder
}

// GetBaseFilePath mocks base method
func (_m *MockUserIF) GetBaseFilePath() string {
	ret := _m.ctrl.Call(_m, "GetBaseFilePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBaseFilePath indicates an expected call of GetBaseFilePath
func (_mr *MockUserIFMockRecorder) GetBaseFilePath() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetBaseFilePath", reflect.TypeOf((*MockUserIF)(nil).GetBaseFilePath))
}

// Login mocks base method
func (_m *MockUserIF) Login(name string, pw string) (*model.User, error) {
	ret := _m.ctrl.Call(_m, "Login", name, pw)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (_mr *MockUserIFMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Login", reflect.TypeOf((*MockUserIF)(nil).Login), arg0, arg1)
}

// Count mocks base method
func (_m *MockUserIF) Count() (int, error) {
	ret := _m.ctrl.Call(_m, "Count")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (_mr *MockUserIFMockRecorder) Count() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Count", reflect.TypeOf((*MockUserIF)(nil).Count))
}

// List mocks base method
func (_m *MockUserIF) List(auth model.Auth, contains string, options Options) ([]*model.User, error) {
	ret := _m.ctrl.Call(_m, "List", auth, contains, options)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockUserIFMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockUserIF)(nil).List), arg0, arg1, arg2)
}

// Get mocks base method
func (_m *MockUserIF) Get(auth model.Auth, id string) (*model.User, error) {
	ret := _m.ctrl.Call(_m, "Get", auth, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockUserIFMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockUserIF)(nil).Get), arg0, arg1)
}

// GetByBCAddress mocks base method
func (_m *MockUserIF) GetByBCAddress(bcAddress string) (*model.User, error) {
	ret := _m.ctrl.Call(_m, "GetByBCAddress", bcAddress)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBCAddress indicates an expected call of GetByBCAddress
func (_mr *MockUserIFMockRecorder) GetByBCAddress(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetByBCAddress", reflect.TypeOf((*MockUserIF)(nil).GetByBCAddress), arg0)
}

// GetByEmail mocks base method
func (_m *MockUserIF) GetByEmail(email string) (*model.User, error) {
	ret := _m.ctrl.Call(_m, "GetByEmail", email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail
func (_mr *MockUserIFMockRecorder) GetByEmail(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetByEmail", reflect.TypeOf((*MockUserIF)(nil).GetByEmail), arg0)
}

// UpdateEmail mocks base method
func (_m *MockUserIF) UpdateEmail(id string, email string) error {
	ret := _m.ctrl.Call(_m, "UpdateEmail", id, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmail indicates an expected call of UpdateEmail
func (_mr *MockUserIFMockRecorder) UpdateEmail(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateEmail", reflect.TypeOf((*MockUserIF)(nil).UpdateEmail), arg0, arg1)
}

// Put mocks base method
func (_m *MockUserIF) Put(auth model.Auth, item *model.User) error {
	ret := _m.ctrl.Call(_m, "Put", auth, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (_mr *MockUserIFMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Put", reflect.TypeOf((*MockUserIF)(nil).Put), arg0, arg1)
}

// PutPw mocks base method
func (_m *MockUserIF) PutPw(id string, pass string) error {
	ret := _m.ctrl.Call(_m, "PutPw", id, pass)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutPw indicates an expected call of PutPw
func (_mr *MockUserIFMockRecorder) PutPw(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PutPw", reflect.TypeOf((*MockUserIF)(nil).PutPw), arg0, arg1)
}

// GetProfilePhoto mocks base method
func (_m *MockUserIF) GetProfilePhoto(auth model.Auth, id string, writer io.Writer) error {
	ret := _m.ctrl.Call(_m, "GetProfilePhoto", auth, id, writer)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetProfilePhoto indicates an expected call of GetProfilePhoto
func (_mr *MockUserIFMockRecorder) GetProfilePhoto(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetProfilePhoto", reflect.TypeOf((*MockUserIF)(nil).GetProfilePhoto), arg0, arg1, arg2)
}

// PutProfilePhoto mocks base method
func (_m *MockUserIF) PutProfilePhoto(auth model.Auth, id string, reader io.Reader) error {
	ret := _m.ctrl.Call(_m, "PutProfilePhoto", auth, id, reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutProfilePhoto indicates an expected call of PutProfilePhoto
func (_mr *MockUserIFMockRecorder) PutProfilePhoto(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PutProfilePhoto", reflect.TypeOf((*MockUserIF)(nil).PutProfilePhoto), arg0, arg1, arg2)
}

// APIKey mocks base method
func (_m *MockUserIF) APIKey(key string) (*model.User, error) {
	ret := _m.ctrl.Call(_m, "APIKey", key)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// APIKey indicates an expected call of APIKey
func (_mr *MockUserIFMockRecorder) APIKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "APIKey", reflect.TypeOf((*MockUserIF)(nil).APIKey), arg0)
}

// CreateApiKey mocks base method
func (_m *MockUserIF) CreateApiKey(auth model.Auth, userId string, apiKeyName string) (string, error) {
	ret := _m.ctrl.Call(_m, "CreateApiKey", auth, userId, apiKeyName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApiKey indicates an expected call of CreateApiKey
func (_mr *MockUserIFMockRecorder) CreateApiKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateApiKey", reflect.TypeOf((*MockUserIF)(nil).CreateApiKey), arg0, arg1, arg2)
}

// DeleteApiKey mocks base method
func (_m *MockUserIF) DeleteApiKey(auth model.Auth, userId string, hiddenApiKey string) error {
	ret := _m.ctrl.Call(_m, "DeleteApiKey", auth, userId, hiddenApiKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApiKey indicates an expected call of DeleteApiKey
func (_mr *MockUserIFMockRecorder) DeleteApiKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteApiKey", reflect.TypeOf((*MockUserIF)(nil).DeleteApiKey), arg0, arg1, arg2)
}

// Close mocks base method
func (_m *MockUserIF) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockUserIFMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockUserIF)(nil).Close))
}

// MockUserDataIF is a mock of UserDataIF interface
type MockUserDataIF struct {
	ctrl     *gomock.Controller
	recorder *MockUserDataIFMockRecorder
}

// MockUserDataIFMockRecorder is the mock recorder for MockUserDataIF
type MockUserDataIFMockRecorder struct {
	mock *MockUserDataIF
}

// NewMockUserDataIF creates a new mock instance
func NewMockUserDataIF(ctrl *gomock.Controller) *MockUserDataIF {
	mock := &MockUserDataIF{ctrl: ctrl}
	mock.recorder = &MockUserDataIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockUserDataIF) EXPECT() *MockUserDataIFMockRecorder {
	return _m.recorder
}

// List mocks base method
func (_m *MockUserDataIF) List(auth model.Auth, contains string, options Options, includeReadGranted bool) ([]*model.UserDataItem, error) {
	ret := _m.ctrl.Call(_m, "List", auth, contains, options, includeReadGranted)
	ret0, _ := ret[0].([]*model.UserDataItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (_mr *MockUserDataIFMockRecorder) List(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "List", reflect.TypeOf((*MockUserDataIF)(nil).List), arg0, arg1, arg2, arg3)
}

// Delete mocks base method
func (_m *MockUserDataIF) Delete(auth model.Auth, files FilesIF, id string) error {
	ret := _m.ctrl.Call(_m, "Delete", auth, files, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockUserDataIFMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockUserDataIF)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method
func (_m *MockUserDataIF) Get(auth model.Auth, id string) (*model.UserDataItem, error) {
	ret := _m.ctrl.Call(_m, "Get", auth, id)
	ret0, _ := ret[0].(*model.UserDataItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockUserDataIFMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockUserDataIF)(nil).Get), arg0, arg1)
}

// GetAllFileInfosOf mocks base method
func (_m *MockUserDataIF) GetAllFileInfosOf(ud *model.UserDataItem) []*file.IO {
	ret := _m.ctrl.Call(_m, "GetAllFileInfosOf", ud)
	ret0, _ := ret[0].([]*file.IO)
	return ret0
}

// GetAllFileInfosOf indicates an expected call of GetAllFileInfosOf
func (_mr *MockUserDataIFMockRecorder) GetAllFileInfosOf(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetAllFileInfosOf", reflect.TypeOf((*MockUserDataIF)(nil).GetAllFileInfosOf), arg0)
}

// GetByWorkflow mocks base method
func (_m *MockUserDataIF) GetByWorkflow(auth model.Auth, wf *model.WorkflowItem, finished bool) (*model.UserDataItem, bool, error) {
	ret := _m.ctrl.Call(_m, "GetByWorkflow", auth, wf, finished)
	ret0, _ := ret[0].(*model.UserDataItem)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByWorkflow indicates an expected call of GetByWorkflow
func (_mr *MockUserDataIFMockRecorder) GetByWorkflow(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetByWorkflow", reflect.TypeOf((*MockUserDataIF)(nil).GetByWorkflow), arg0, arg1, arg2)
}

// GetData mocks base method
func (_m *MockUserDataIF) GetData(auth model.Auth, id string, dataPath string) (interface{}, error) {
	ret := _m.ctrl.Call(_m, "GetData", auth, id, dataPath)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData
func (_mr *MockUserDataIFMockRecorder) GetData(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetData", reflect.TypeOf((*MockUserDataIF)(nil).GetData), arg0, arg1, arg2)
}

// GetDataAndFiles mocks base method
func (_m *MockUserDataIF) GetDataAndFiles(auth model.Auth, id string, dataPath string) (interface{}, []string, error) {
	ret := _m.ctrl.Call(_m, "GetDataAndFiles", auth, id, dataPath)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDataAndFiles indicates an expected call of GetDataAndFiles
func (_mr *MockUserDataIFMockRecorder) GetDataAndFiles(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetDataAndFiles", reflect.TypeOf((*MockUserDataIF)(nil).GetDataAndFiles), arg0, arg1, arg2)
}

// PutData mocks base method
func (_m *MockUserDataIF) PutData(auth model.Auth, id string, dataObj map[string]interface{}) error {
	ret := _m.ctrl.Call(_m, "PutData", auth, id, dataObj)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutData indicates an expected call of PutData
func (_mr *MockUserDataIFMockRecorder) PutData(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PutData", reflect.TypeOf((*MockUserDataIF)(nil).PutData), arg0, arg1, arg2)
}

// NewFile mocks base method
func (_m *MockUserDataIF) NewFile(auth model.Auth, meta file.Meta) *file.IO {
	ret := _m.ctrl.Call(_m, "NewFile", auth, meta)
	ret0, _ := ret[0].(*file.IO)
	return ret0
}

// NewFile indicates an expected call of NewFile
func (_mr *MockUserDataIFMockRecorder) NewFile(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NewFile", reflect.TypeOf((*MockUserDataIF)(nil).NewFile), arg0, arg1)
}

// GetDataFile mocks base method
func (_m *MockUserDataIF) GetDataFile(auth model.Auth, id string, dataPath string) (*file.IO, error) {
	ret := _m.ctrl.Call(_m, "GetDataFile", auth, id, dataPath)
	ret0, _ := ret[0].(*file.IO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataFile indicates an expected call of GetDataFile
func (_mr *MockUserDataIFMockRecorder) GetDataFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetDataFile", reflect.TypeOf((*MockUserDataIF)(nil).GetDataFile), arg0, arg1, arg2)
}

// Put mocks base method
func (_m *MockUserDataIF) Put(auth model.Auth, item *model.UserDataItem) error {
	ret := _m.ctrl.Call(_m, "Put", auth, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (_mr *MockUserDataIFMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Put", reflect.TypeOf((*MockUserDataIF)(nil).Put), arg0, arg1)
}

// AssetsKey mocks base method
func (_m *MockUserDataIF) AssetsKey() string {
	ret := _m.ctrl.Call(_m, "AssetsKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// AssetsKey indicates an expected call of AssetsKey
func (_mr *MockUserDataIFMockRecorder) AssetsKey() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AssetsKey", reflect.TypeOf((*MockUserDataIF)(nil).AssetsKey))
}

// Close mocks base method
func (_m *MockUserDataIF) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockUserDataIFMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockUserDataIF)(nil).Close))
}

// MockSignatureRequestsIF is a mock of SignatureRequestsIF interface
type MockSignatureRequestsIF struct {
	ctrl     *gomock.Controller
	recorder *MockSignatureRequestsIFMockRecorder
}

// MockSignatureRequestsIFMockRecorder is the mock recorder for MockSignatureRequestsIF
type MockSignatureRequestsIFMockRecorder struct {
	mock *MockSignatureRequestsIF
}

// NewMockSignatureRequestsIF creates a new mock instance
func NewMockSignatureRequestsIF(ctrl *gomock.Controller) *MockSignatureRequestsIF {
	mock := &MockSignatureRequestsIF{ctrl: ctrl}
	mock.recorder = &MockSignatureRequestsIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSignatureRequestsIF) EXPECT() *MockSignatureRequestsIFMockRecorder {
	return _m.recorder
}

// GetBySignatory mocks base method
func (_m *MockSignatureRequestsIF) GetBySignatory(ethAddr string) (*[]model.SignatureRequestItem, error) {
	ret := _m.ctrl.Call(_m, "GetBySignatory", ethAddr)
	ret0, _ := ret[0].(*[]model.SignatureRequestItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySignatory indicates an expected call of GetBySignatory
func (_mr *MockSignatureRequestsIFMockRecorder) GetBySignatory(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetBySignatory", reflect.TypeOf((*MockSignatureRequestsIF)(nil).GetBySignatory), arg0)
}

// GetByID mocks base method
func (_m *MockSignatureRequestsIF) GetByID(docid string, docpath string) (*[]model.SignatureRequestItem, error) {
	ret := _m.ctrl.Call(_m, "GetByID", docid, docpath)
	ret0, _ := ret[0].(*[]model.SignatureRequestItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (_mr *MockSignatureRequestsIFMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetByID", reflect.TypeOf((*MockSignatureRequestsIF)(nil).GetByID), arg0, arg1)
}

// GetByHashAndSigner mocks base method
func (_m *MockSignatureRequestsIF) GetByHashAndSigner(hash string, signatory string) (*[]model.SignatureRequestItem, error) {
	ret := _m.ctrl.Call(_m, "GetByHashAndSigner", hash, signatory)
	ret0, _ := ret[0].(*[]model.SignatureRequestItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHashAndSigner indicates an expected call of GetByHashAndSigner
func (_mr *MockSignatureRequestsIFMockRecorder) GetByHashAndSigner(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetByHashAndSigner", reflect.TypeOf((*MockSignatureRequestsIF)(nil).GetByHashAndSigner), arg0, arg1)
}

// Add mocks base method
func (_m *MockSignatureRequestsIF) Add(item *model.SignatureRequestItem) error {
	ret := _m.ctrl.Call(_m, "Add", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (_mr *MockSignatureRequestsIFMockRecorder) Add(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Add", reflect.TypeOf((*MockSignatureRequestsIF)(nil).Add), arg0)
}

// SetRejected mocks base method
func (_m *MockSignatureRequestsIF) SetRejected(docid string, docpath string, signatory string) error {
	ret := _m.ctrl.Call(_m, "SetRejected", docid, docpath, signatory)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRejected indicates an expected call of SetRejected
func (_mr *MockSignatureRequestsIFMockRecorder) SetRejected(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetRejected", reflect.TypeOf((*MockSignatureRequestsIF)(nil).SetRejected), arg0, arg1, arg2)
}

// SetRevoked mocks base method
func (_m *MockSignatureRequestsIF) SetRevoked(docid string, docpath string, signatory string) error {
	ret := _m.ctrl.Call(_m, "SetRevoked", docid, docpath, signatory)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRevoked indicates an expected call of SetRevoked
func (_mr *MockSignatureRequestsIFMockRecorder) SetRevoked(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetRevoked", reflect.TypeOf((*MockSignatureRequestsIF)(nil).SetRevoked), arg0, arg1, arg2)
}

// Close mocks base method
func (_m *MockSignatureRequestsIF) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockSignatureRequestsIFMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockSignatureRequestsIF)(nil).Close))
}

// MockWorkflowPaymentsIF is a mock of WorkflowPaymentsIF interface
type MockWorkflowPaymentsIF struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowPaymentsIFMockRecorder
}

// MockWorkflowPaymentsIFMockRecorder is the mock recorder for MockWorkflowPaymentsIF
type MockWorkflowPaymentsIFMockRecorder struct {
	mock *MockWorkflowPaymentsIF
}

// NewMockWorkflowPaymentsIF creates a new mock instance
func NewMockWorkflowPaymentsIF(ctrl *gomock.Controller) *MockWorkflowPaymentsIF {
	mock := &MockWorkflowPaymentsIF{ctrl: ctrl}
	mock.recorder = &MockWorkflowPaymentsIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockWorkflowPaymentsIF) EXPECT() *MockWorkflowPaymentsIFMockRecorder {
	return _m.recorder
}

// GetByTxHashAndStatusAndFromEthAddress mocks base method
func (_m *MockWorkflowPaymentsIF) GetByTxHashAndStatusAndFromEthAddress(txHash string, status string, from string) (*model.WorkflowPaymentItem, error) {
	ret := _m.ctrl.Call(_m, "GetByTxHashAndStatusAndFromEthAddress", txHash, status, from)
	ret0, _ := ret[0].(*model.WorkflowPaymentItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTxHashAndStatusAndFromEthAddress indicates an expected call of GetByTxHashAndStatusAndFromEthAddress
func (_mr *MockWorkflowPaymentsIFMockRecorder) GetByTxHashAndStatusAndFromEthAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetByTxHashAndStatusAndFromEthAddress", reflect.TypeOf((*MockWorkflowPaymentsIF)(nil).GetByTxHashAndStatusAndFromEthAddress), arg0, arg1, arg2)
}

// Get mocks base method
func (_m *MockWorkflowPaymentsIF) Get(paymentId string) (*model.WorkflowPaymentItem, error) {
	ret := _m.ctrl.Call(_m, "Get", paymentId)
	ret0, _ := ret[0].(*model.WorkflowPaymentItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockWorkflowPaymentsIFMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockWorkflowPaymentsIF)(nil).Get), arg0)
}

// ConfirmPayment mocks base method
func (_m *MockWorkflowPaymentsIF) ConfirmPayment(txHash string, from string, to string, xes uint64) error {
	ret := _m.ctrl.Call(_m, "ConfirmPayment", txHash, from, to, xes)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmPayment indicates an expected call of ConfirmPayment
func (_mr *MockWorkflowPaymentsIFMockRecorder) ConfirmPayment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ConfirmPayment", reflect.TypeOf((*MockWorkflowPaymentsIF)(nil).ConfirmPayment), arg0, arg1, arg2, arg3)
}

// GetByWorkflowIdAndFromEthAddress mocks base method
func (_m *MockWorkflowPaymentsIF) GetByWorkflowIdAndFromEthAddress(workflowID string, fromEthAddr string, statuses []string) (*model.WorkflowPaymentItem, error) {
	ret := _m.ctrl.Call(_m, "GetByWorkflowIdAndFromEthAddress", workflowID, fromEthAddr, statuses)
	ret0, _ := ret[0].(*model.WorkflowPaymentItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByWorkflowIdAndFromEthAddress indicates an expected call of GetByWorkflowIdAndFromEthAddress
func (_mr *MockWorkflowPaymentsIFMockRecorder) GetByWorkflowIdAndFromEthAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetByWorkflowIdAndFromEthAddress", reflect.TypeOf((*MockWorkflowPaymentsIF)(nil).GetByWorkflowIdAndFromEthAddress), arg0, arg1, arg2)
}

// SetAbandonedToTimeoutBeforeTime mocks base method
func (_m *MockWorkflowPaymentsIF) SetAbandonedToTimeoutBeforeTime(beforeTime time.Time) error {
	ret := _m.ctrl.Call(_m, "SetAbandonedToTimeoutBeforeTime", beforeTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAbandonedToTimeoutBeforeTime indicates an expected call of SetAbandonedToTimeoutBeforeTime
func (_mr *MockWorkflowPaymentsIFMockRecorder) SetAbandonedToTimeoutBeforeTime(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetAbandonedToTimeoutBeforeTime", reflect.TypeOf((*MockWorkflowPaymentsIF)(nil).SetAbandonedToTimeoutBeforeTime), arg0)
}

// Save mocks base method
func (_m *MockWorkflowPaymentsIF) Save(item *model.WorkflowPaymentItem) error {
	ret := _m.ctrl.Call(_m, "Save", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (_mr *MockWorkflowPaymentsIFMockRecorder) Save(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Save", reflect.TypeOf((*MockWorkflowPaymentsIF)(nil).Save), arg0)
}

// Update mocks base method
func (_m *MockWorkflowPaymentsIF) Update(paymentId string, status string, txHash string, from string) error {
	ret := _m.ctrl.Call(_m, "Update", paymentId, status, txHash, from)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (_mr *MockWorkflowPaymentsIFMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockWorkflowPaymentsIF)(nil).Update), arg0, arg1, arg2, arg3)
}

// Cancel mocks base method
func (_m *MockWorkflowPaymentsIF) Cancel(paymentId string, from string) error {
	ret := _m.ctrl.Call(_m, "Cancel", paymentId, from)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel
func (_mr *MockWorkflowPaymentsIFMockRecorder) Cancel(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Cancel", reflect.TypeOf((*MockWorkflowPaymentsIF)(nil).Cancel), arg0, arg1)
}

// Redeem mocks base method
func (_m *MockWorkflowPaymentsIF) Redeem(workflowId string, from string) error {
	ret := _m.ctrl.Call(_m, "Redeem", workflowId, from)
	ret0, _ := ret[0].(error)
	return ret0
}

// Redeem indicates an expected call of Redeem
func (_mr *MockWorkflowPaymentsIFMockRecorder) Redeem(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Redeem", reflect.TypeOf((*MockWorkflowPaymentsIF)(nil).Redeem), arg0, arg1)
}

// Delete mocks base method
func (_m *MockWorkflowPaymentsIF) Delete(paymentId string) error {
	ret := _m.ctrl.Call(_m, "Delete", paymentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockWorkflowPaymentsIFMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockWorkflowPaymentsIF)(nil).Delete), arg0)
}

// Remove mocks base method
func (_m *MockWorkflowPaymentsIF) Remove(payment *model.WorkflowPaymentItem) error {
	ret := _m.ctrl.Call(_m, "Remove", payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (_mr *MockWorkflowPaymentsIFMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Remove", reflect.TypeOf((*MockWorkflowPaymentsIF)(nil).Remove), arg0)
}

// All mocks base method
func (_m *MockWorkflowPaymentsIF) All() ([]*model.WorkflowPaymentItem, error) {
	ret := _m.ctrl.Call(_m, "All")
	ret0, _ := ret[0].([]*model.WorkflowPaymentItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All
func (_mr *MockWorkflowPaymentsIFMockRecorder) All() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "All", reflect.TypeOf((*MockWorkflowPaymentsIF)(nil).All))
}

// Close mocks base method
func (_m *MockWorkflowPaymentsIF) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockWorkflowPaymentsIFMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockWorkflowPaymentsIF)(nil).Close))
}

// MockFilesIF is a mock of FilesIF interface
type MockFilesIF struct {
	ctrl     *gomock.Controller
	recorder *MockFilesIFMockRecorder
}

// MockFilesIFMockRecorder is the mock recorder for MockFilesIF
type MockFilesIFMockRecorder struct {
	mock *MockFilesIF
}

// NewMockFilesIF creates a new mock instance
func NewMockFilesIF(ctrl *gomock.Controller) *MockFilesIF {
	mock := &MockFilesIF{ctrl: ctrl}
	mock.recorder = &MockFilesIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockFilesIF) EXPECT() *MockFilesIFMockRecorder {
	return _m.recorder
}

// Read mocks base method
func (_m *MockFilesIF) Read(path string, w io.Writer) error {
	ret := _m.ctrl.Call(_m, "Read", path, w)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read
func (_mr *MockFilesIFMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Read", reflect.TypeOf((*MockFilesIF)(nil).Read), arg0, arg1)
}

// Write mocks base method
func (_m *MockFilesIF) Write(path string, r io.Reader) error {
	ret := _m.ctrl.Call(_m, "Write", path, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (_mr *MockFilesIFMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Write", reflect.TypeOf((*MockFilesIF)(nil).Write), arg0, arg1)
}

// Exists mocks base method
func (_m *MockFilesIF) Exists(path string) (bool, error) {
	ret := _m.ctrl.Call(_m, "Exists", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (_mr *MockFilesIFMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Exists", reflect.TypeOf((*MockFilesIF)(nil).Exists), arg0)
}

// Delete mocks base method
func (_m *MockFilesIF) Delete(path string) error {
	ret := _m.ctrl.Call(_m, "Delete", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockFilesIFMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockFilesIF)(nil).Delete), arg0)
}

// Close mocks base method
func (_m *MockFilesIF) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockFilesIFMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockFilesIF)(nil).Close))
}

// MockSessionIF is a mock of SessionIF interface
type MockSessionIF struct {
	ctrl     *gomock.Controller
	recorder *MockSessionIFMockRecorder
}

// MockSessionIFMockRecorder is the mock recorder for MockSessionIF
type MockSessionIFMockRecorder struct {
	mock *MockSessionIF
}

// NewMockSessionIF creates a new mock instance
func NewMockSessionIF(ctrl *gomock.Controller) *MockSessionIF {
	mock := &MockSessionIF{ctrl: ctrl}
	mock.recorder = &MockSessionIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSessionIF) EXPECT() *MockSessionIFMockRecorder {
	return _m.recorder
}

// Get mocks base method
func (_m *MockSessionIF) Get(sid string) (*model.Session, error) {
	ret := _m.ctrl.Call(_m, "Get", sid)
	ret0, _ := ret[0].(*model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (_mr *MockSessionIFMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockSessionIF)(nil).Get), arg0)
}

// Put mocks base method
func (_m *MockSessionIF) Put(s *model.Session) error {
	ret := _m.ctrl.Call(_m, "Put", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (_mr *MockSessionIFMockRecorder) Put(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Put", reflect.TypeOf((*MockSessionIF)(nil).Put), arg0)
}

// Delete mocks base method
func (_m *MockSessionIF) Delete(s *model.Session) error {
	ret := _m.ctrl.Call(_m, "Delete", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockSessionIFMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockSessionIF)(nil).Delete), arg0)
}

// GetTokenRequest mocks base method
func (_m *MockSessionIF) GetTokenRequest(t model.TokenType, id string) (*model.TokenRequest, error) {
	ret := _m.ctrl.Call(_m, "GetTokenRequest", t, id)
	ret0, _ := ret[0].(*model.TokenRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenRequest indicates an expected call of GetTokenRequest
func (_mr *MockSessionIFMockRecorder) GetTokenRequest(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetTokenRequest", reflect.TypeOf((*MockSessionIF)(nil).GetTokenRequest), arg0, arg1)
}

// PutTokenRequest mocks base method
func (_m *MockSessionIF) PutTokenRequest(r *model.TokenRequest) error {
	ret := _m.ctrl.Call(_m, "PutTokenRequest", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutTokenRequest indicates an expected call of PutTokenRequest
func (_mr *MockSessionIFMockRecorder) PutTokenRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PutTokenRequest", reflect.TypeOf((*MockSessionIF)(nil).PutTokenRequest), arg0)
}

// DeleteTokenRequest mocks base method
func (_m *MockSessionIF) DeleteTokenRequest(r *model.TokenRequest) error {
	ret := _m.ctrl.Call(_m, "DeleteTokenRequest", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTokenRequest indicates an expected call of DeleteTokenRequest
func (_mr *MockSessionIFMockRecorder) DeleteTokenRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteTokenRequest", reflect.TypeOf((*MockSessionIF)(nil).DeleteTokenRequest), arg0)
}

// GetValue mocks base method
func (_m *MockSessionIF) GetValue(key string, v interface{}) error {
	ret := _m.ctrl.Call(_m, "GetValue", key, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetValue indicates an expected call of GetValue
func (_mr *MockSessionIFMockRecorder) GetValue(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetValue", reflect.TypeOf((*MockSessionIF)(nil).GetValue), arg0, arg1)
}

// PutValue mocks base method
func (_m *MockSessionIF) PutValue(key string, v interface{}) error {
	ret := _m.ctrl.Call(_m, "PutValue", key, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutValue indicates an expected call of PutValue
func (_mr *MockSessionIFMockRecorder) PutValue(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "PutValue", reflect.TypeOf((*MockSessionIF)(nil).PutValue), arg0, arg1)
}

// DeleteValue mocks base method
func (_m *MockSessionIF) DeleteValue(key string) error {
	ret := _m.ctrl.Call(_m, "DeleteValue", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteValue indicates an expected call of DeleteValue
func (_mr *MockSessionIFMockRecorder) DeleteValue(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteValue", reflect.TypeOf((*MockSessionIF)(nil).DeleteValue), arg0)
}

// Close mocks base method
func (_m *MockSessionIF) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (_mr *MockSessionIFMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Close", reflect.TypeOf((*MockSessionIF)(nil).Close))
}
