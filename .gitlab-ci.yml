stages:
  - init
  - check
  - build
  - push
  - security
  - report
  - deploy
  - update
  - status
  - clean
  - release

### Default S-Pro Pipeline of DevOps Team
variables:
  AWS_ECR: "true"
  AWS_REGION: us-east-1
  AWS_DOCKER_REGISTRY_URL: 907208926079.dkr.ecr.us-east-1.amazonaws.com
  AWS_ECR_REGION: us-east-1
  DD_CONTAINER_TAG: 0.6.0
  USER: root
  DEV_SERVER_ADDR: 164.92.189.73
#   STAGE_SERVER_ADDR: 164.92.249.95
#   PREPROD_SERVER_ADDR: 165.227.138.155
  # PROD_SERVER_ADDR:
  DEV_BRANCH: develop
  STAGE_BRANCH: stage
  PREPROD_BRANCH: preprod
  PROD_BRANCH: master
  
  DOCKERFILE_PATH: ./Dockerfile
  VERSION_PATH: ./version.yml

Common:Env:
  stage: init
  image: core.s-pro.io/devops-images/dd-container:${DD_CONTAINER_TAG}
  interruptible: true
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
    - if: '$CI_COMMIT_BRANCH == $STAGE_BRANCH'
    - if: '$CI_COMMIT_BRANCH == $PREPROD_BRANCH'
    - if: '$CI_COMMIT_BRANCH == $PROD_BRANCH'

  script:
    - NAMESPACE=$(echo "$CI_PROJECT_NAMESPACE" | tr '[:upper:]' '[:lower:]'| sed "s/\//-/" )
    - echo "NAMESPACE=$(echo "$CI_PROJECT_NAMESPACE" | tr '[:upper:]' '[:lower:]'| sed "s/\//-/" )" >> common.env
    - echo "DEV_BRANCH=${DEV_BRANCH}" >> common.env
    - echo "STAGE_BRANCH=${STAGE_BRANCH}" >> common.env
    - echo "PREPROD_BRANCH=${PREPROD_BRANCH}" >> common.env
    - echo "PROD_BRANCH=${PROD_BRANCH}" >> common.env
    - kubectl config get-contexts
    - echo "K8S_DEV_CONTEXT=$(kubectl config get-contexts | grep ${K8S_DEV_CLUSTER_CONTEXT} | awk '{print$1}')" >> common.env
    - echo "K8S_STAGE_CONTEXT=$(kubectl config get-contexts | grep ${K8S_STAGE_CLUSTER_CONTEXT} | awk '{print$1}')" >> common.env
    - echo "K8S_PREPROD_CONTEXT=$(kubectl config get-contexts | grep ${K8S_PREPROD_CLUSTER_CONTEXT} | awk '{print$1}')" >> common.env
    - echo "K8S_PROD_CONTEXT=$(kubectl config get-contexts | grep ${K8S_PROD_CLUSTER_CONTEXT} | awk '{print$1}')" >> common.env
    - echo "PROJECT_NAME=$(echo "$CI_PROJECT_NAME" | tr '[:upper:]' '[:lower:]'| sed "s/\//-/" | sed 's/[[:blank:]]*$//' | sed 's/\r$//' )" >> common.env
    - |-
        if [ "$UMBRELLA_CHART_NAME" == "null" ]
        then
            echo "UMBRELLA_CHART_NAME=${NAMESPACE}" >> common.env
        else
            echo "UMBRELLA_CHART_NAME=${UMBRELLA_CHART_NAME}" >> common.env
        fi
    - |-
        FILE=${VERSION_PATH}
        if [ -f "$FILE" ];
        then
            VERSION_FILE=${VERSION_PATH}
        else
            VERSION_FILE="${CHART_DIR}/Chart.yaml"
            CHART_NAME=$(yq eval .name "${VERSION_FILE}")
            echo "CHART_NAME=${CHART_NAME}" >> common.env
        fi
    - |-
        if [ "$CI_PIPELINE_SOURCE" == "merge_request_event" ];
        then
          RC_SUFFIX=-rc.${CI_PIPELINE_ID}
          OLD_TAG=$(yq eval .version "${VERSION_FILE}")
          echo "IMAGE_TAG=${OLD_TAG}${RC_SUFFIX}" >> common.env
          echo "CHART_TAG=${OLD_TAG}${RC_SUFFIX}" >> common.env
          echo "OLD_TAG=${OLD_TAG}" >> common.env
        else
          RC_SUFFIX=-rc.${CI_PIPELINE_ID}
          OLD_TAG=$(yq eval .version "${VERSION_FILE}")
          echo "IMAGE_TAG=${OLD_TAG}${RC_SUFFIX}" >> common.env
          echo "CHART_TAG=${OLD_TAG}${RC_SUFFIX}" >> common.env
          echo "OLD_TAG=${OLD_TAG}" >> common.env
        fi
  artifacts:
    name: "EnvVars"
    reports:
      dotenv: common.env

# Docker:Build:
#   stage: build
Docker:Init:
  stage: init
  interruptible: true
  image:
    name: cimg/go:1.16-node
    entrypoint: [""]
  script:
    - |-
        make ui
        make init validate
        make init test
        make init server
        make init server-docker
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      variables:
        ENV: 'dev'
    - if: '$CI_COMMIT_BRANCH == $STAGE_BRANCH'
      variables:
        ENV: 'stage'
    - if: '$CI_COMMIT_BRANCH == $PREPROD_BRANCH'
      variables:
        ENV: 'preprod'
    - if: '$CI_COMMIT_BRANCH == $PROD_BRANCH'
      variables:
        ENV: 'prod'
  needs:
    - job: Common:Env
      artifacts: true
  artifacts:
    paths:
    - ./artifacts/proxeus-docker

Docker:Build:
  stage: build
  interruptible: true
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - |-
            /kaniko/executor \
            --context $CI_PROJECT_DIR \
            --dockerfile $DOCKERFILE_PATH \
            --no-push \
            --destination ${AWS_DOCKER_REGISTRY_URL}\/${NAMESPACE}\/${ENV}\/${PROJECT_NAME}:latest \
            --tarPath image.tar
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      variables:
        ENV: 'dev'
    - if: '$CI_COMMIT_BRANCH == $STAGE_BRANCH'
      variables:
        ENV: 'stage'
    - if: '$CI_COMMIT_BRANCH == $PREPROD_BRANCH'
      variables:
        ENV: 'preprod'
    - if: '$CI_COMMIT_BRANCH == $PROD_BRANCH'
      variables:
        ENV: 'prod'
  needs:
    - job: Docker:Init
      artifacts: true
  artifacts:
    paths:
    - image.tar

Docker:Push:
  stage: push
  interruptible: true
  image:
    name: core.s-pro.io/devops-images/dd-container:${DD_CONTAINER_TAG}
    entrypoint: [""]
  script:
    - |-
          aws ecr get-login-password --region us-east-1 | crane auth login -u AWS --password-stdin ${AWS_DOCKER_REGISTRY_URL}
          crane push image.tar ${AWS_DOCKER_REGISTRY_URL}\/${NAMESPACE}\/${ENV}\/${PROJECT_NAME}:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      variables:
        ENV: 'dev'
    - if: '$CI_COMMIT_BRANCH == $STAGE_BRANCH'
      variables:
        ENV: 'stage'
    - if: '$CI_COMMIT_BRANCH == $PREPROD_BRANCH'
      variables:
        ENV: 'preprod'
    - if: '$CI_COMMIT_BRANCH == $PROD_BRANCH'
      variables:
        ENV: 'prod'
  needs:
    - job: Common:Env
      artifacts: true
    - job: Docker:Build
      artifacts: true

Deploy:Docker:Compose:
  image: core.s-pro.io/devops-images/dd-container:${DD_CONTAINER_TAG}
  stage: deploy
  before_script:
    - export ECR_TOKEN=$(aws ecr get-login-password --region ${AWS_ECR_REGION})
  script:
    - chmod 600 $GITLAB_SSH
    - scp -i $GITLAB_SSH -o StrictHostKeyChecking=no -r ./.[!.]* ./* ${USER}@${SERVER_ADDR}:${CI_TARGET_DIR}
    - |-
      ssh -i $GITLAB_SSH -o StrictHostKeyChecking=no ${USER}@${SERVER_ADDR} \
        " cd $CI_TARGET_DIR
          rm -rf .git/
          echo "$ECR_TOKEN" | docker login -u AWS --password-stdin ${AWS_DOCKER_REGISTRY_URL}; \
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v /etc:/etc:ro spotify/docker-gc; \
          docker-compose -f docker-compose.yml -f docker-compose-cloud.override.yml pull; \
          docker-compose -f docker-compose.yml -f docker-compose-cloud.override.yml down --remove-orphans; \
          docker-compose -f docker-compose.yml -f docker-compose-cloud.override.yml up -d; \
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v /etc:/etc:ro spotify/docker-gc; \
          docker logout ${AWS_DOCKER_REGISTRY_URL}; \
          docker system prune -f
        "
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      variables:
        ENV: 'DEV'
        SERVER_ADDR: $DEV_SERVER_ADDR
    - if: '$CI_COMMIT_BRANCH == $STAGE_BRANCH'
      variables:
        ENV: 'STAGE'
        SERVER_ADDR: $STAGE_SERVER_ADDR
    - if: '$CI_COMMIT_BRANCH == $PREPROD_BRANCH'
      variables:
        ENV: 'PREPROD'
        SERVER_ADDR: $PREPROD_SERVER_ADDR
    - if: '$CI_COMMIT_BRANCH == $PROD_BRANCH'
      variables:
        ENV: 'PROD'
        SERVER_ADDR: $PROD_SERVER_ADDR

Update:Prod:GitHub:
  image: core.s-pro.io/devops-images/dd-container:${DD_CONTAINER_TAG}
  stage: update
  needs:
    - job: Common:Env
      artifacts: true
  script:
    - git remote remove origin
    - git remote add origin https://topuzliev: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@github.com/topuzliev/proxeusapp.git
    - git checkout -b tanya-${CI_PIPELINE_ID}
    - echo "docker-compose.yml" >> .gitignore
    - echo "docker-compose-cloud.override.yml" >> .gitignore
    - echo ".gitlab-ci.yml" >> .gitignore
    - echo "version.yml" >> .gitignore
    - git push https://topuzliev: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@github.com/topuzliev/proxeusapp.git
  rules:
    - if: '$CI_COMMIT_BRANCH == $PROD_BRANCH'
      when: manual
