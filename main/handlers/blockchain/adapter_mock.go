// Code generated by MockGen. DO NOT EDIT.
// Source: main/handlers/blockchain/adapter.go

// Package blockchain is a generated GoMock package.
package blockchain

import (
	reflect "reflect"

	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
)

// Mockadapter is a mock of adapter interface
type Mockadapter struct {
	ctrl     *gomock.Controller
	recorder *MockadapterMockRecorder
}

// MockadapterMockRecorder is the mock recorder for Mockadapter
type MockadapterMockRecorder struct {
	mock *Mockadapter
}

// NewMockadapter creates a new mock instance
func NewMockadapter(ctrl *gomock.Controller) *Mockadapter {
	mock := &Mockadapter{ctrl: ctrl}
	mock.recorder = &MockadapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockadapter) EXPECT() *MockadapterMockRecorder {
	return m.recorder
}

// getContractAddress mocks base method
func (m *Mockadapter) getContractAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getContractAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// getContractAddress indicates an expected call of getContractAddress
func (mr *MockadapterMockRecorder) getContractAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getContractAddress", reflect.TypeOf((*Mockadapter)(nil).getContractAddress))
}

// eventFromLog mocks base method
func (m *Mockadapter) eventFromLog(out interface{}, lg *types.Log, eventType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "eventFromLog", out, lg, eventType)
	ret0, _ := ret[0].(error)
	return ret0
}

// eventFromLog indicates an expected call of eventFromLog
func (mr *MockadapterMockRecorder) eventFromLog(out, lg, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "eventFromLog", reflect.TypeOf((*Mockadapter)(nil).eventFromLog), out, lg, eventType)
}
