// Code generated by MockGen. DO NOT EDIT.
// Source: main/handlers/blockchain/adapter.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockAdapter is a mock of Adapter interface
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// GetContractAddress mocks base method
func (m *MockAdapter) GetContractAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetContractAddress indicates an expected call of GetContractAddress
func (mr *MockAdapterMockRecorder) GetContractAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractAddress", reflect.TypeOf((*MockAdapter)(nil).GetContractAddress))
}

// EventFromLog mocks base method
func (m *MockAdapter) EventFromLog(out interface{}, lg *types.Log, eventType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventFromLog", out, lg, eventType)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventFromLog indicates an expected call of EventFromLog
func (mr *MockAdapterMockRecorder) EventFromLog(out, lg, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventFromLog", reflect.TypeOf((*MockAdapter)(nil).EventFromLog), out, lg, eventType)
}
