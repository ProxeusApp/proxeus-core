// Code generated by MockGen. DO NOT EDIT.
// Source: sys/db/storm/workflow_payments.go

// Package storm is a generated GoMock package.
package storm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "git.proxeus.com/core/central/sys/model"
)

// MockWorkflowPaymentsDBInterface is a mock of WorkflowPaymentsDBInterface interface
type MockWorkflowPaymentsDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowPaymentsDBInterfaceMockRecorder
}

// MockWorkflowPaymentsDBInterfaceMockRecorder is the mock recorder for MockWorkflowPaymentsDBInterface
type MockWorkflowPaymentsDBInterfaceMockRecorder struct {
	mock *MockWorkflowPaymentsDBInterface
}

// NewMockWorkflowPaymentsDBInterface creates a new mock instance
func NewMockWorkflowPaymentsDBInterface(ctrl *gomock.Controller) *MockWorkflowPaymentsDBInterface {
	mock := &MockWorkflowPaymentsDBInterface{ctrl: ctrl}
	mock.recorder = &MockWorkflowPaymentsDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkflowPaymentsDBInterface) EXPECT() *MockWorkflowPaymentsDBInterfaceMockRecorder {
	return m.recorder
}

// GetByTxHash mocks base method
func (m *MockWorkflowPaymentsDBInterface) GetByTxHash(txHash string) (*model.WorkflowPaymentItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTxHash", txHash)
	ret0, _ := ret[0].(*model.WorkflowPaymentItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTxHash indicates an expected call of GetByTxHash
func (mr *MockWorkflowPaymentsDBInterfaceMockRecorder) GetByTxHash(txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTxHash", reflect.TypeOf((*MockWorkflowPaymentsDBInterface)(nil).GetByTxHash), txHash)
}

// GetByWorkflowId mocks base method
func (m *MockWorkflowPaymentsDBInterface) GetByWorkflowId(workflowID string) (*model.WorkflowPaymentItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByWorkflowId", workflowID)
	ret0, _ := ret[0].(*model.WorkflowPaymentItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByWorkflowId indicates an expected call of GetByWorkflowId
func (mr *MockWorkflowPaymentsDBInterfaceMockRecorder) GetByWorkflowId(workflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByWorkflowId", reflect.TypeOf((*MockWorkflowPaymentsDBInterface)(nil).GetByWorkflowId), workflowID)
}

// GetByWorkflowIdAndFromEthAddress mocks base method
func (m *MockWorkflowPaymentsDBInterface) GetByWorkflowIdAndFromEthAddress(workflowID, ethAddr string) (*model.WorkflowPaymentItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByWorkflowIdAndFromEthAddress", workflowID, ethAddr)
	ret0, _ := ret[0].(*model.WorkflowPaymentItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByWorkflowIdAndFromEthAddress indicates an expected call of GetByWorkflowIdAndFromEthAddress
func (mr *MockWorkflowPaymentsDBInterfaceMockRecorder) GetByWorkflowIdAndFromEthAddress(workflowID, ethAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByWorkflowIdAndFromEthAddress", reflect.TypeOf((*MockWorkflowPaymentsDBInterface)(nil).GetByWorkflowIdAndFromEthAddress), workflowID, ethAddr)
}

// Add mocks base method
func (m *MockWorkflowPaymentsDBInterface) Add(item *model.WorkflowPaymentItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockWorkflowPaymentsDBInterfaceMockRecorder) Add(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockWorkflowPaymentsDBInterface)(nil).Add), item)
}

// Delete mocks base method
func (m *MockWorkflowPaymentsDBInterface) Delete(txHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", txHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockWorkflowPaymentsDBInterfaceMockRecorder) Delete(txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWorkflowPaymentsDBInterface)(nil).Delete), txHash)
}

// Close mocks base method
func (m *MockWorkflowPaymentsDBInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockWorkflowPaymentsDBInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWorkflowPaymentsDBInterface)(nil).Close))
}
