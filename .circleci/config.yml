---
version: 2.1

executors:
  docker-image-golang:
    environment:
      PROJECT_ROOT_FOLDER: ~/project
    docker:
      - image: circleci/golang:1.13
  docker-image-golang-test-api:
    environment:
      PROJECT_ROOT_FOLDER: ~/project
    docker:
      - image: circleci/golang:1.13
      - image: proxeus/document-service:latest
  docker-publisher:
    environment:
      PROJECT_ROOT_FOLDER: ~/project
      CONTAINER_IMAGE_NAME: proxeus/proxeus-core
    docker:
      - image: circleci/buildpack-deps:stretch

jobs:
  build-ui:
    docker:
      - image: node:10
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-v1-{{ checksum "ui/yarn.lock" }}
      - run:
          name: Build UI
          command: make ui
      - save_cache:
          key: yarn-v1-{{ checksum "ui/yarn.lock" }}
          paths:
            - ./ui/.yarn/
            - ./ui/node_modules/
            - ./ui/core/node_modules/
            - ./ui/wallet/node_modules/
      - persist_to_workspace:
          root: .
          paths:
            - ./ui/core/dist

  validate-go:
    executor: docker-image-golang
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v2-{{ .Revision }}
      - run:
          name: Validate
          command: make init validate

  test-go:
    executor: docker-image-golang
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: Test
          command: make init test
      - save_cache:
          key: go-mod-v2-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

  build-go:
    executor: docker-image-golang
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: Test
          command: make init server
      - persist_to_workspace:
          root: .
          paths:
            - ./artifacts/proxeus

  coverage-go:
    executor: docker-image-golang-test-api
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/
      - setup_remote_docker
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: Test
          command: make init coverage

  test-api-go:
    executor: docker-image-golang-test-api
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/
      - setup_remote_docker
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: Test
          command: make init test-api

  build-server-docker:
    executor: docker-image-golang
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: Build server binary
          command: make init server-docker
      - persist_to_workspace:
          root: .
          paths:
            - ./artifacts/proxeus-docker

  build-docker-image:
    executor: docker-publisher
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -f Dockerfile -t $CONTAINER_IMAGE_NAME:latest -t $CONTAINER_IMAGE_NAME .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $CONTAINER_IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - image.tar

  publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $CONTAINER_IMAGE_NAME

  publish-stage:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Tag docker image
          command: docker tag $CONTAINER_IMAGE_NAME $CONTAINER_IMAGE_NAME:stage
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $CONTAINER_IMAGE_NAME:stage

  publish-demo:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Tag docker image
          command: docker tag $CONTAINER_IMAGE_NAME $CONTAINER_IMAGE_NAME:demo
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $CONTAINER_IMAGE_NAME:demo

  publish-handelsregister:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Tag docker image
          command: docker tag $CONTAINER_IMAGE_NAME $CONTAINER_IMAGE_NAME:handelsregister
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $CONTAINER_IMAGE_NAME:handelsregister

workflows:
  version: 2
  build-master:
    jobs:
      - build-ui
      - validate-go
      - test-go:
          requires:
            - validate-go
            - build-ui
      - build-go:
          requires:
            - test-go
      - coverage-go:
          requires:
            - build-go
      - test-api-go:
          requires:
            - build-go
      - build-server-docker:
          requires:
            - test-api-go
      - build-docker-image:
          requires:
            - build-server-docker
          filters:
            branches:
              only: master
      - publish-latest:
          requires:
            - build-docker-image
          filters:
            branches:
              only: master
      - approve-stage:
          type: approval
          requires:
            - build-docker-image
          filters:
            branches:
              only: master
      - publish-stage:
          requires:
            - approve-stage
          filters:
            branches:
              only: master
      - approve-demo:
          type: approval
          requires:
            - build-docker-image
          filters:
            branches:
              only: master
      - publish-demo:
          requires:
            - approve-demo
          filters:
            branches:
              only: master
      - approve-handelsregister:
          type: approval
          requires:
            - build-docker-image
          filters:
            branches:
              only: master
      - publish-handelsregister:
          requires:
            - approve-handelsregister
          filters:
            branches:
              only: master
