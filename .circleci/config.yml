---
version: 2.1

parameters:
  golang-tag:
    type: string
    default: "1.21"
  nodejs-ver:
    type: integer
    default: 16
  nodejs-tag:
    type: string
    default: "16.20"

executors:
  docker-image-golang:
    environment:
      PROJECT_ROOT_FOLDER: ~/project
    docker:
      - image: cimg/go:1.20
  docker-image-golang-dependencies:
    environment:
      PROJECT_ROOT_FOLDER: ~/project
    docker:
      - image: cimg/go:1.20
      - image: proxeus/node-crypto-forex-rates
      - image: proxeus/document-service
      - image: proxeus/mongo-dev-cluster
  docker-publisher:
    environment:
      PROJECT_ROOT_FOLDER: ~/project
      CONTAINER_IMAGE_NAME: proxeus/proxeus-core
    docker:
      - image: circleci/buildpack-deps:stretch

jobs:
  build-ui:
    docker:
      - image: cimg/node:16.20
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-v1-{{ checksum "ui/yarn.lock" }}
      - run:
          name: Build UI
          command: make ui
      - save_cache:
          key: yarn-v1-{{ checksum "ui/yarn.lock" }}
          paths:
            - ./ui/.yarn/
            - ./ui/node_modules/
            - ./ui/core/node_modules/
            - ./ui/wallet/node_modules/
      - persist_to_workspace:
          root: .
          paths:
            - ./ui/core/dist

  validate-go:
    executor: docker-image-golang
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v2-{{ .Revision }}
      - run:
          name: Validate
          command: make init validate

  test-go:
    executor: docker-image-golang
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: Test
          command: make init test
      - save_cache:
          key: go-mod-v2-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"

  build-go:
    executor: docker-image-golang
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: Test
          command: make init server
      - persist_to_workspace:
          root: .
          paths:
            - ./artifacts/proxeus

  test-integration-go:
    executor: docker-image-golang-dependencies
    resource_class: medium
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: Test integration
          command: make init test-integration

  test-api-go:
    executor: docker-image-golang-dependencies
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/
      - setup_remote_docker
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: Test API
          command: make init test-api

  coverage-go:
    executor: docker-image-golang-dependencies
    resource_class: medium
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/
      - setup_remote_docker
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: Run tests with coverage
          command: make init test coverage=true
      - run:
          name: Generage coverage files
          command: make coverage
      - store_artifacts:
          path: artifacts/coverage.*

  test-ui:
    executor: docker-image-golang-dependencies
    resource_class: medium
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/
      - setup_remote_docker
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run: 
          name: Node.js
          command: curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
      - run: 
          name: Yarn
          command: curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
      - run: echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
      - run: sudo apt-get update && sudo apt-get install yarn
      - run: 
          name: Cypress dependencies
          command: sudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
      - run:
          name: Test UI
          command: make init test-ui

  build-server-docker:
    executor: docker-image-golang
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: Build server binary
          command: make init server-docker
      - persist_to_workspace:
          root: .
          paths:
            - ./artifacts/proxeus-docker

  build-docker-image:
    executor: docker-publisher
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -f Dockerfile -t $CONTAINER_IMAGE_NAME:latest -t $CONTAINER_IMAGE_NAME .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $CONTAINER_IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - image.tar

  publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Tag latest docker image
          command: docker tag $CONTAINER_IMAGE_NAME $CONTAINER_IMAGE_NAME:latest
      - run:
          name: Publish latest Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $CONTAINER_IMAGE_NAME:latest
      - run:
          name: Tag the latest Docker release with current Git version
          command: docker tag $CONTAINER_IMAGE_NAME:$CIRCLE_TAG $CONTAINER_IMAGE_NAME:latest

workflows:
  version: 2
  build-master:
    jobs:
      - build-ui
      - validate-go
      - test-go:
          requires:
            - validate-go
            - build-ui
      - build-go:
          requires:
            - test-go
      - test-integration-go:
          requires:
            - build-go
      - test-api-go:
          requires:
            - test-integration-go
      - test-ui:
          requires:
            - test-integration-go
      - coverage-go:
          requires:
            - build-go
      - build-server-docker:
          requires:
            - coverage-go
      - build-docker-image:
          requires:
            - build-server-docker
            - test-api-go
            - test-ui
          filters:
            branches:
              only: main
      - publish-latest:
          requires:
            - build-docker-image
          filters:
            branches:
              only: main