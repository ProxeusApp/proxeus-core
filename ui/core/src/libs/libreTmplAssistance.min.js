import ReconnectingWebSocket from './ReconnectingWebsocket'

var libreHub = {
  opts: { searchVar: function () {} },
  fileName: null,
  conn: null,
  suggestionEnabled: true,
  suggestionFrameOpen: false,
  closeSuggestionFrame: function () {
    if (this.suggestionFrameOpen) {
      this.suggestionFrameOpen = false
      this.conn.send('{"m":"suggest", "a":"close"}')
    }
  },
  getVarJSON: function (varName) {
    var newVarJSON = JSON.parse(JSON.stringify(this.varJSON))
    newVarJSON.content = [{ text: ['${', varName, '}'], style: [1, 0, 1] }]
    return newVarJSON
  },
  searchVar: function (resultObj, clbk) {
    this.opts.searchVar(resultObj, function (foundList, resObj) {
      clbk(foundList, resObj)
    })
  },
  yellowHighlightsReq: {
    m: 'search',
    includeText: true,
    content: [
      { style: { CharBackColor: '#fff200' } },
      { style: { CharBackColor: '#ffff00' } }
    ]
  },
  yellowHighlightsIndex: 0,
  yellowHighlightsEvent: function (ev) {
    libreHub.yellowHighlightsIndex = 0
    libreHub.yellowHighlightsRequested = true
    libreHub.conn.send(libreHub.yellowHighlightsReqStr)
    return false
  },
  isInYellowHighlightsMode: function (inc) {
    if (inc) {
      libreHub.yellowHighlightsIndex++
    }
    if (libreHub.yellowHighlightsToComplete) {
      if (libreHub.yellowHighlightsToComplete.length <= libreHub.yellowHighlightsIndex) {
        libreHub.yellowHighlightsToComplete = null
        return 0
      }
      return libreHub.yellowHighlightsToComplete.length
    }
    return 0
  },
  updateYellowHighlights: function (contentArray) {
    /**
         *
         * {"content":[{"result":[{"end":10,"i":590,"start":0,"text":"dsfsdfdsfa"},
                             * {"end":9,"i":1338,"start":0,"text":"TEXTFRAME"}],"style":{"CharBackColor":"#fff200"}},
                             * {"result":[{"end":8,"i":5,"start":0,"text":"UR CAUSE"}],"style":{"CharBackColor":"#ffff00"}}],
                             * "includeText":true,"m":"search"}
         */
    var result = libreHub.yellowHighlightsToComplete[libreHub.yellowHighlightsIndex]
    //                try{
    var res
    for (var i1 = 0; i1 < contentArray.length; ++i1) {
      res = contentArray[i1].result
      for (var i2 = 0; i2 < res.length; ++i2) {
        if (res[i2].text == result.text) {
          res[i2].updated = true
          libreHub.yellowHighlightsToComplete[libreHub.yellowHighlightsIndex] = res[i2]
          libreHub.yellowHighlightsNext()
          return
        }
      }
    }
    result.updated = true
    //                }catch (ee){}
    libreHub.yellowHighlightsNext()
  },
  yellowHighlightsNext: function (ignoredLast) {
    if (this.isInYellowHighlightsMode(ignoredLast)) {
      var result = libreHub.yellowHighlightsToComplete[libreHub.yellowHighlightsIndex]
      if (this.yellowHighlightsIndex > 0 && !result.updated) {
        var updateReq = JSON.parse(this.yellowHighlightsReqStr)
        for (var ii = 0; ii < updateReq.content.length; ++ii) {
          updateReq.content[ii].text = result.text
        }
        libreHub.yellowHighlightsRequested = true
        libreHub.yellowHighlightsUpdateRequested = true
        this.conn.send(JSON.stringify(updateReq))
      } else {
        if (result.text) {
          libreHub.searchVar(result, function (foundList, reqResult) {
            if (foundList && foundList.length) {
              if (foundList.length == 1) {
                libreHub.conn.send(JSON.stringify({ m: 'replace', replace: [reqResult], styles: libreHub.varSuggestion.styles, content: [{ text: ['${', foundList[0], '}'], style: [1, 0, 1] }] }))
              } else {
                var req = JSON.parse(libreHub.varSuggestionStr)
                var start = parseInt(reqResult.text.length / 2 + 0.5)
                req.at.mustMatch = true
                req.at.start = reqResult.text.substring(0, start)
                try {
                  var atEnd = reqResult.text.substring(start)
                  if (atEnd) {
                    req.at.end = atEnd
                  } else {
                    delete req.at.end
                  }
                } catch (dontCareE) {}
                req.select = { i: reqResult.i, start: reqResult.start + start }// set cursor on libre
                // ask the user which one to take
                var contentArray = []
                for (var i = 0; i < foundList.length; ++i) {
                  contentArray.push({ li: foundList[i], text: ['${', foundList[i], '}'], style: [1, 0, 1] })
                }
                req.content = contentArray
                libreHub.conn.send(JSON.stringify(req))
              }
            } else {
              libreHub.yellowHighlightsNext(true)
            }
          })
        } else {
          libreHub.yellowHighlightsNext(true)
        }
      }
    }
  },
  initSettings: {
    m: 'settings',
    set: {
      event: {
        common: false,
        suggestionFrame: true,
        keydown: false,
        keyup: true
      },
      keyEventMarginStart: 40,
      keyEventMarginEnd: 40,
      cursorInsertMarginStart: 40,
      cursorInsertMarginEnd: 40
    }
  },
  varJSON: {
    styles: [{ CharBackColor: 'none', CharColor: '#4CAF50', CharShadowed: true, CharFontStyleName: 'monospace', CharFontName: 'monospace' }, { CharBackColor: 'none' }]
  },
  varSuggestion: {
    m: 'suggest',
    insertAfterSelection: true,
    at: { start: '${', end: '}', highlight: '#dee4ff', mustMatch: true },
    styles: [{ CharBackColor: 'none', CharColor: '#4CAF50', CharShadowed: true, CharFontStyleName: 'monospace', CharFontName: 'monospace' }, { CharBackColor: 'none' }],
    content: []
  },
  setSuggestionEnabled: function (enable) {
    this.suggestionEnabled = enable
    if (this.suggestionEnabled) {
      this.$suggestionToggle.removeClass('btn-warning')
      this.$suggestionToggle.addClass('btn-success')
      this.$suggestionToggle.html('Suggestion On')
    } else {
      this.$suggestionToggle.removeClass('btn-success')
      this.$suggestionToggle.addClass('btn-warning')
      this.$suggestionToggle.html('Suggestion Off')
    }
  },
  main: function (opts) {
    this.opts = opts
    opts.$container.append(___staticContnt__)
    this.varSuggestionStr = JSON.stringify(this.varSuggestion)
    this.yellowHighlightsReqStr = JSON.stringify(this.yellowHighlightsReq)
    this.$libreHub = $('.libreHub')
    this.$libreHubSearch = this.$libreHub.find('.libreHub-search')
    this.$suggestionToggle = this.$libreHub.find('.libreHub-suggestion')
    this.$libreHubTmplAssistance = this.$libreHub.find('.lh-tmplAssistance')
    this.$searchField = this.$libreHubSearch.find('input.libreHub-si')
    this.$replaceField = this.$libreHubSearch.find('input.libreHub-ri')
    this.$libreHub.find('button.libreHub-hlted').on('click', this.yellowHighlightsEvent)
    var searchInputEvent = function (event) {
      if (event.which == 13 || event.keyCode == 13) {
        return libreHub.searchEvent(event)
      }
    }
    this.$libreHub.find('button.close-sugfr').on('click', function () {
      libreHub.closeSuggestionFrame()
    })
    var replaceInputEvent = function (event) {
      if (event.which == 13 || event.keyCode == 13) {
        return libreHub.replaceEvent(event)
      }
    }
    this.$suggestionToggle.on('click', function () {
      libreHub.setSuggestionEnabled(!libreHub.suggestionEnabled)
      $(this).blur()
    })
    libreHub.setSuggestionEnabled(libreHub.suggestionEnabled)
    this.$searchField.on('keyup', searchInputEvent)
    this.$replaceField.on('keyup', replaceInputEvent)
    this.$libreHubSearch.find('button.libreHub-si').on('click', this.searchEvent)
    this.$libreHubSearch.find('button.libreHub-ri').on('click', this.replaceEvent)
    this.updateFileName(opts.fileName)
  },
  searchEvent: function (event) {
    var srchText = libreHub.$searchField.val()
    if (srchText && libreHub.conn) {
      libreHub.conn.send(JSON.stringify({ m: 'search', content: [{ text: srchText }] }))
    }
    return false
  },
  replaceEvent: function (event) {
    var srchText = libreHub.$searchField.val()
    if (srchText && libreHub.conn) {
      libreHub.conn.send(JSON.stringify({ m: 'replace', content: [{ text: srchText }], with: [{ text: libreHub.$replaceField.val() }] }))
    }
    return false
  },
  dragStart: function (e, json) {
    // drag and drop to libre
    if (e.dataTransfer && e.dataTransfer.setData) {
      if (e.target) { // #searchRef @dsmimyRef
        e.dataTransfer.setData('text/plain;charset=utf-8', '{}')
        json.drop = true
        json.m = 'dropSrc'
        libreHub.conn.send(JSON.stringify(json))
      }
    }
  },
  updateFileName: function (newFileName) {
    if (newFileName) {
      if (this.fileName != newFileName) {
        this.fileName = newFileName
        var reqID = this.toHex(encodeURI(newFileName)).toUpperCase()
        this.setupLibreHubWS(reqID)
      }
    }
  },
  toHex: function (s) { var r = ''; var i = 0; var h; while (i < s.length) { h = s.charCodeAt(i++).toString(16); while (h.length < 2) { h = h }r += h } return r },
  setupLibreHubWS: function (myIDParam) {
    // lhSearch = libreHub.$libreHubSearch;

    if (window.WebSocket) {
      if (libreHub.conn) {
        libreHub.conn.close()
      }
      // var myIDParam;try{myIDParam=window.location.href.split("?")[1];}catch(e){console.log(e);}if(!myIDParam || !myIDParam.startsWith("id=")){myIDParam="id=62756C6C65745F706F696E74732E6F6474";}console.log(myIDParam);
      libreHub.conn = new ReconnectingWebSocket('ws://localhost:43134/libre?id=' + myIDParam + '&a=2903h49839fN_fjsldf23092j3')
      // libreHub.conn = new ReconnectingWebSocket("ws://localhost:55434/libre?id="+myIDParam+"&a=xdff03hghd839fN_hdf57d0gsdh");
      libreHub.conn.onopen = function (evt) {
        libreHub.conn.send(JSON.stringify(libreHub.initSettings))
      }
      libreHub.conn.onclose = function (evt) {
        //                    var item = document.createElement("div");
        //                    item.innerHTML = "<b>Connection closed.</b>";
        //                    appendLog(item);
        libreHub.$libreHub.css({ background: '' })
        libreHub.$libreHubTmplAssistance.hide('slide', { direction: 'down' }, 800)
        libreHub.yellowHighlightsToComplete = null
      }
      libreHub.conn.onmessage = function (evt) {
        //                    var messages = evt.data.split('\n');
        //                    for (var i = 0; i < messages.length; i++) {
        //                        var item = document.createElement("div");
        //                        item.innerText = messages[i];
        //                        appendLog(item);
        //                    }
        if (typeof evt.data === 'string') {
          // var item = document.createElement("div");
          //                        item.appendChild(document.createTextNode(evt.data));
          //                        appendLog(item);
          evt.data = JSON.parse(evt.data)
        } else {
          //                        var item = document.createElement("div");
          //                        item.appendChild(document.createTextNode(JSON.stringify(evt.data)));
          //                        appendLog(item);
        }
        if (evt.data.t === 'OnReplaceDone') {
          if (libreHub.isInYellowHighlightsMode(true)) {
            libreHub.yellowHighlightsNext()
          }
        } else if (evt.data.e === 'suggestionFrame') {
          if (evt.data.s === 'opened') {
            libreHub.suggestionFrameOpen = true
          } else if (evt.data.s === 'closed') {
            libreHub.suggestionFrameOpen = false
            if (libreHub.isInYellowHighlightsMode(true)) {
              libreHub.yellowHighlightsNext()
            }
          }
        } else if (evt.data.e === 'status') {
          if (evt.data.connected) {
            libreHub.$libreHub.css({ background: 'rgba(64, 225, 209, 0.63)' })
            libreHub.$libreHubTmplAssistance.show('slide', { direction: 'down' }, 800)
          } else {
            libreHub.$libreHub.css({ background: 'rgba(255, 198, 121, 0.458824)' })
            libreHub.$libreHubTmplAssistance.hide('slide', { direction: 'down' }, 800)
            libreHub.yellowHighlightsToComplete = null
          }
        } else if (!libreHub.isInYellowHighlightsMode() && libreHub.suggestionEnabled && evt.data.e === 'keyup' && !(/DOWN|UP|LESS|TAB|RETURN/.test(evt.data.n))) {
          if (evt.data.f) {
            libreHub.closeSuggestionFrame()
          } else if (evt.data.at) {
            var start = evt.data.at.start
            if (start) {
              // if(!(/DELETE|BACKSPACE/.test(evt.data["n"])) && evt.data["c"] && !(/[\x00-\x7F]+/.test(evt.data["c"]))){
              //     start += evt.data["c"];
              // }
              var m
              if ((m = /(\$\{)([^\}]*$)/.exec(start)) !== null && m.length > 2) {
                var searchTxt = m[2]
                libreHub.searchVar({ text: searchTxt, data: evt.data }, function (foundList, reqObj) {
                  if (foundList && foundList.length) {
                    var end = reqObj.data.at.end
                    var resp = JSON.parse(libreHub.varSuggestionStr)
                    if (end && (m = /(((?!\$\{|\}).*)(\}))|(\})/.exec(end)) !== null && m.length > 2) {
                      resp.at.end = '}'
                    } else {
                      delete resp.at.end
                    }
                    var foundItem
                    for (var i = 0; i < foundList.length; ++i) {
                      foundItem = foundList[i]
                      foundList[i] = { li: foundItem, text: ['${', foundItem, '}'], style: [-1, 0] }
                    }
                    resp.content = foundList
                    libreHub.conn.send(JSON.stringify(resp))
                  } else {
                    libreHub.closeSuggestionFrame()
                  }
                })
              } else {
                libreHub.closeSuggestionFrame()
              }
            } else {
              libreHub.closeSuggestionFrame()
            }
          }
        } else if (evt.data.m == 'search' && evt.data.content && evt.data.content.length) {
          var contentArray = evt.data.content
          if (libreHub.yellowHighlightsRequested) {
            libreHub.yellowHighlightsRequested = false
            if (libreHub.yellowHighlightsUpdateRequested) {
              libreHub.yellowHighlightsUpdateRequested = false
              libreHub.updateYellowHighlights(contentArray)
            } else {
              libreHub.yellowHighlightsToComplete = []
              var result
              for (var ri = 0; ri < contentArray.length; ri++) {
                result = contentArray[ri].result
                if (result && result.length) {
                  for (var cai = 0; cai < result.length; cai++) {
                    if (result[cai] && result[cai].text) {
                      libreHub.yellowHighlightsToComplete.push(result[cai])
                    }
                  }
                }
              }
              libreHub.yellowHighlightsToComplete.sort(function (a, b) { return b.i < a.i })
              libreHub.yellowHighlightsNext()
            }
          } else {
            // var resultCntr = lhSearch.find(".libreHub-search-result");
            // resultCntr.empty();
            // for (var ci = 0; ci < contentArray.length; ci++){
            //     var myResults = contentArray[ci]["result"];
            //     var r;
            //     var styles;
            //     for (var ii = 0; ii < myResults.length; ii++){
            //         styles = contentArray[ci]["style"];
            //         r = $("<p>"+("<span>"+(ii+1)+".</span>")+($('<div>').text(contentArray[ci]["text"]).html())+ " " + (styles?JSON.stringify(styles):"")+"</p>");
            //         resultCntr.append(r);
            //         r.data("ri", {"m":"select", "i":myResults[ii].i,"start":myResults[ii].start,"end":myResults[ii].end});
            //         r.on("click", function(){
            //             var p = $(this);
            //             libreHub.conn.send(JSON.stringify(p.data("ri")));
            //             p.parent().children().removeClass("lh-hover");
            //             p.addClass("lh-hover");
            //         });
            //     }
            // }
          }
        }
      }
    } else {
      //                var item = document.createElement("div");
      //                item.innerHTML = "<b>Your browser does not support WebSockets.</b>";
      //                appendLog(item);
    }
  }
}

var ___staticContnt__ = `
<div class="libreHubExtension">
<style>
@keyframes draggableAnim { from { border-left: dotted 1px rgba(4, 255, 15, 0.32);border-top: dotted 1px rgba(4, 255, 15, 0.32);border-right: dotted 1px rgba(4, 255, 15, 0.32);border-bottom: dotted 1px rgba(4, 255, 15, 0.32); } to { border-left: dashed 1px #00e241;border-top: dashed 1px #00e241;border-right: dashed 1px #00e241;border-bottom: dashed 1px #00e241;  } }

.libreHub {
    position: absolute;
    background: rgba(0, 0, 0, 0.26);
    width: 360px;
    padding: 5px;
    box-sizing: border-box;
    bottom: 0;
    left: 0;
}
.libreHub .panel-group {
    margin: 0;
}
.libreHub-draggable{
    animation:draggableAnim 3s infinite ease-in-out;
}
.libreHub-search {
    box-sizing: border-box;
    width: 100%;
    padding: 0;
    margin: 0;
    border: 1px solid rgba(0, 0, 0, 0.41);
    display: none;
}
.libreHub-search input {
    width: 100%;
    height: 25px;
    border: 1px solid rgba(0, 0, 0, 0.03);
    border-bottom: 1px solid black;
    padding: 4px;
    position: relative;
    display: block;
    box-sizing: border-box;
    background: rgba(255, 255, 255, 0.85);
}
.libreHub-search table tr>td:last-child {
    width: 1px;
}
.libreHub-search table {
    margin: 0;
    padding: 0;
    border-spacing: 0;
    width: 100%;
    box-sizing: border-box;
}
.libreHub button {
    border-radius: 0;
}
.libreHub-search-result {
    max-height: 200px;
    overflow: auto;
    display: block;
    position: relative;
    box-sizing: border-box;
    background: rgba(255, 255, 255, 0.85);
    margin: 1px 4px 4px 4px;
}
.libreHub-search-result>p {
    margin: 0;
    padding: 4px 8px;
    border-bottom:1px solid gray;
    box-sizing: border-box;
}
.libreHub-search-result p>span {
    color: rgba(0, 0, 0, 0.45);
    margin-right: 5px;
    display: inline-block;
}
.libreHub-search-result>p:hover {
    cursor:pointer;
}
.libreHub-search-result>p.lh-hover {
    background:rgba(0, 122, 255, 0.38);
}
.libreHub-hlted {
    width: 100%;
    color: black !important;
    background: transparent;
}
.libreHub-hlted, .libreHub-hlted > *{
    font-family: monospace;
}
.libreHub-hlted span {
    background: yellow;
    padding: 2px;
}
.libreHub-hlted i {
    color: #07c516;
    font-style: normal;
    text-shadow: 1px 1px #676767;
}
.libreHub-hlted o {
    color: #dadada;
    font-style: normal;
}
.libreHub-hlted e {
    color: #0056ff;
    text-shadow: 1px 1px #676767;
}
.libreHub-hlted d {
    color: #ff00ff;
}
.libreHub-hlted p {
    margin: 3px 0 0 30px;
}
.libreHub .libreHub-codeboard{
    background: white;
}
.libreHub .panel-group a>.libreHub-codeboard {
    background: transparent !important;
    padding: 0;
}
button.libreHub-hlted {
    background: white;
    margin: 6px 0;
}

button.libreHub-hlted o {
    color: blue;
}
.libreHub .panel-body {
    padding: 8px;
}
</style>
<div class="libreHub">
    <div class="lh-tmplAssistance" style="display: none;">
    <div class="libreHub-settings">
    <div class="panel-group" id="lhMainAccordion" role="tablist" aria-multiselectable="true">
        <div class="panel panel-default">
            <div class="panel-heading" role="tab" id="lhMainAccor">
                <h4 class="panel-title">
                    <a role="button" data-toggle="collapse" data-parent="#lhMainAccordion" href="#_111fcollapseOne" aria-expanded="false" aria-controls="_111fcollapseOne">
                        <div class="libreHub-codeboard"><span class="libreHub-hlted"><d>Template</d> <e>Assistance</e></span></div>
                    </a>
                </h4>
            </div>
            <div id="_111fcollapseOne" class="panel-collapse collapse" role="tabpanel" aria-labelledby="lhMainAccor">
                <div class="panel-body">
    <button type="button" style="width:100%;margin-bottom:5px;" class="btn libreHub-suggestion">Suggestion On</button>
    <button type="button" class="btn btn-success libreHub-hlted"><span>Name</span> <o>-></o> <c>\${<i>Name</i>}</c></button>
    <!--<button type="button" class="close-sugfr">close suggestion frame</button>-->
    <div class="panel-group" id="accordionCode" role="tablist" aria-multiselectable="true">
    <div class="panel panel-default">
    <div class="panel-heading" role="tab" id="fheadingOne">
    <h4 class="panel-title">
    <a role="button" data-toggle="collapse" data-parent="#accordionCode" href="#fcollapseOne" aria-expanded="false" aria-controls="fcollapseOne">
    <div class="libreHub-codeboard"><span class="libreHub-hlted"><c>{</c><d>%</d><e>code</e><d>%</d><c>}</c></span></div>
</a>
</h4>
</div>
<div id="fcollapseOne" class="panel-collapse collapse" role="tabpanel" aria-labelledby="fheadingOne">
    <div class="panel-body">
    <div class="panel-group" id="accordionCodeBlocks" role="tablist" aria-multiselectable="true">
    <div class="panel panel-default">
    <div class="panel-heading" role="tab" id="headingOne">
    <h4 class="panel-title">
    <a role="button" data-toggle="collapse" data-parent="#accordionCodeBlocks" href="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
    <div class="libreHub-codeboard"><span class="libreHub-hlted"><c>{</c><d>%</d><e>if</e><d>%</d><c>}</c></span></div>
</a>
</h4>
</div>
<div id="collapseOne" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingOne">
    <div class="panel-body">
    <script type=text/javascript>
var _ifLibreJson = {
        "styles": [
            {"CharColor":"#0056ff","CharShadowed":true, "ParaAdjust":"left", "CharFontName":"Liberation Mono"},
            {"CharColor": "#ff00ff", "CharShadowed":false, "ParaAdjust":"left", "CharFontName":"Liberation Mono"},
            {"CharColor":"#07c516", "CharShadowed":true, "ParaAdjust":"left", "CharFontName":"Liberation Mono"}
        ],
        "content": [{
            "text": [
                "{","%","if"," condition ","%","}",
                " content ",
                "{","%","endif","%","}"
            ],
            "style": [-1,1,0,2,1,-1,  -1,  -1,1,0,1,-1]
        }]
    }
    </script>
    <div draggable="true" ondragstart="libreHub.dragStart(event, _ifLibreJson);" class="libreHub-hlted libreHub-draggable">
    <c>{</c><d>%</d><e>if</e> <i>condition</i> <d>%</d><c>}</c> content <c>{</c><d>%</d><e>endif</e><d>%</d><c>}</c>
</div>
</div>
</div>
</div>
<div class="panel panel-default">
    <div class="panel-heading" role="tab" id="headingTwo">
    <h4 class="panel-title">
    <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordionCodeBlocks" href="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
    <div class="libreHub-codeboard"><span class="libreHub-hlted"><c>{</c><d>%</d><e>if</e><d>%</d><c>}</c><c>{</c><d>%</d><e>else</e><d>%</d><c>}</c></span></div>
</a>
</h4>
</div>
<div id="collapseTwo" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingTwo">
    <div class="panel-body">
    <script type=text/javascript>
var _ifElseLibreJson = {
        "styles": [
            {"CharColor":"#0056ff","CharShadowed":true, "ParaAdjust":"left", "CharFontName":"Liberation Mono"},
            {"CharColor": "#ff00ff", "CharShadowed":false, "ParaAdjust":"left", "CharFontName":"Liberation Mono"},
            {"CharColor":"#07c516", "CharShadowed":true, "ParaAdjust":"left", "CharFontName":"Liberation Mono"}
        ],
        "content": [{
            "text": [
                "\\n{","%","if"," condition ","%","}\\n",
                "\\tif content",
                "\\n{","%","else","%","}\\n",
                "\\telse content",
                "\\n{","%","endif","%","}\\n"
            ],
            "style": [-1,1,0,2,1,-1,  -1,  -1,1,0,1,-1,  -1,  -1,1,0,1,-1]
        }]
    }
    </script>
    <div draggable="true" ondragstart="libreHub.dragStart(event, _ifElseLibreJson);" class="libreHub-hlted libreHub-draggable">
    <c>{</c><d>%</d><e>if</e> <i>condition</i> <d>%</d><c>}</c>
<p>if content</p>
<c>{</c><d>%</d><e>else</e><d>%</d><c>}</c>
<p>else content</p>
<c>{</c><d>%</d><e>endif</e><d>%</d><c>}</c>
</div>
</div>
</div>
</div>
<div class="panel panel-default">
    <div class="panel-heading" role="tab" id="headingThree">
    <h4 class="panel-title">
    <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordionCodeBlocks" href="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
    <div class="libreHub-codeboard"><span class="libreHub-hlted"><c>{</c><d>%</d><e>if</e><d>%</d><c>}</c><c>{</c><d>%</d><e>elseif</e><d>%</d><c>}</c><c>{</c><d>%</d><e>else</e><d>%</d><c>}</c></span></div>
</a>
</h4>
</div>
<div id="collapseThree" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingThree">
    <div class="panel-body">
    <div class="libreHub-codeboard">
    <script type=text/javascript>
var _ifElseIfElseLibreJson = {
        "styles": [
            {"CharColor":"#0056ff","CharShadowed":true, "ParaAdjust":"left", "CharFontName":"Liberation Mono"},
            {"CharColor": "#ff00ff", "CharShadowed":false, "ParaAdjust":"left", "CharFontName":"Liberation Mono"},
            {"CharColor":"#07c516", "CharShadowed":true, "ParaAdjust":"left", "CharFontName":"Liberation Mono"}
        ],
        "content": [{
            "text": [
                "\\n{","%","if"," condition ","%","}\\n",
                "\\tif content",
                "\\n{","%","elseif"," condition ","%","}\\n",
                "\\telseif content",
                "\\n{","%","else","%","}\\n",
                "\\telse content",
                "\\n{","%","endif","%","}\\n"
            ],
            "style": [-1,1,0,2,1,-1,  -1,  -1,1,0,2,1,-1,  -1,  -1,1,0,1,-1,  -1,  -1,1,0,1,-1]
        }]
    }
    </script>
    <div draggable="true" ondragstart="libreHub.dragStart(event, _ifElseIfElseLibreJson);" class="libreHub-hlted libreHub-draggable">
    <c>{</c><d>%</d><e>if</e> <i>condition</i> <d>%</d><c>}</c>
<p>if content</p>
<c>{</c><d>%</d><e>elseif</e> <i>condition</i> <d>%</d><c>}</c>
<p>elseif content</p>
<c>{</c><d>%</d><e>else</e><d>%</d><c>}</c>
<p>else content</p>
<c>{</c><d>%</d><e>endif</e><d>%</d><c>}</c>
</div>
</div>
</div>
</div>
</div>
<div class="panel panel-default">
    <div class="panel-heading" role="tab" id="headingThree14">
    <h4 class="panel-title">
    <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordionCodeBlocks" href="#collapseThree14" aria-expanded="false" aria-controls="collapseThree14">
    <div class="libreHub-codeboard"><span class="libreHub-hlted"><c>{</c><d>%</d><e>set</e><d>%</d><c>}</c></span></div>
</a>
</h4>
</div>
<div id="collapseThree14" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingThree14">
    <div class="panel-body">
    <div class="libreHub-codeboard">
    <script type=text/javascript>
var _setLibreJson = {
        "styles": [
            {"CharColor":"#0056ff","CharShadowed":true, "ParaAdjust":"left", "CharFontName":"Liberation Mono"},
            {"CharColor": "#ff00ff", "CharShadowed":false, "ParaAdjust":"left", "CharFontName":"Liberation Mono"},
            {"CharColor":"#07c516", "CharShadowed":true, "ParaAdjust":"left", "CharFontName":"Liberation Mono"}
        ],
        "content": [{
            "text": [
                "{","%","set"," varName"," =", " \\\"code or value\\\" ","%","}"
            ],
            "style": [-1,1,0,2, 1, 2,1,-1]
        }]
    }
    </script>
    <div draggable="true" ondragstart="libreHub.dragStart(event, _setLibreJson);" class="libreHub-hlted libreHub-draggable">
<c>{</c><d>%</d><e>set</e><i> varName</i><e> =</e><i> \"code or value\" </i><d>%</d><c>}</c>
</div>
</div>
</div>
</div>
</div>
<div class="panel panel-default">
    <div class="panel-heading" role="tab" id="headingThree4">
    <h4 class="panel-title">
    <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordionCodeBlocks" href="#collapseThree4" aria-expanded="false" aria-controls="collapseThree4">
    <div class="libreHub-codeboard"><span class="libreHub-hlted"><c>{</c><d>%</d><e>for</e><d>%</d><c>}</c></span></div>
</a>
</h4>
</div>
<div id="collapseThree4" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingThree4">
    <div class="panel-body">
    <div class="libreHub-codeboard">
    <script type=text/javascript>
var _forLibreJson = {
        "styles": [
            {"CharColor":"#0056ff","CharShadowed":true, "ParaAdjust":"left", "CharFontName":"Liberation Mono"},
            {"CharColor": "#ff00ff", "CharShadowed":false, "ParaAdjust":"left", "CharFontName":"Liberation Mono"},
            {"CharColor":"#07c516", "CharShadowed":true, "ParaAdjust":"left", "CharFontName":"Liberation Mono"}
        ],
        "content": [{
            "text": [
                "\\n{","%","for"," item"," in", " [1, ':-)', 1.5] ","%","}\\n",
                "\\tcontent \${","item","}"," \${","index","}"," \${","length","}"," \${","ilength","}"," \${","first","}"," \${","last","}",
                "\\n{","%","endFor","%","}\\n"
            ],
            "style": [-1,1,0,2, 1, 2,1,-1,  -1,2,-1, -1,2,-1, -1,2,-1, -1,2,-1, -1,2,-1, -1,2,-1,  -1,1,0,1,-1]
        }]
    }
    </script>
    <div draggable="true" ondragstart="libreHub.dragStart(event, _forLibreJson);" class="libreHub-hlted libreHub-draggable">
    <c>{</c><d>%</d><e>for</e><i> item</i><e> in</e><i> [1, ':-)', 1.5] </i><d>%</d><c>}</c>
<p>content \${<i>item</i>} \${<i>index</i>} \${<i>length</i>} \${<i>ilength</i>} \${<i>first</i>} \${<i>last</i>}</p>
<c>{</c><d>%</d><e>endFor</e><d>%</d><c>}</c>
</div>
</div>
</div>
</div>
</div>
<div class="panel panel-default">
    <div class="panel-heading" role="tab" id="headingThree5">
    <h4 class="panel-title">
    <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordionCodeBlocks" href="#collapseThree5" aria-expanded="false" aria-controls="collapseThree5">
    <div class="libreHub-codeboard"><span class="libreHub-hlted"><c>{</c><d>%</d><e>forRow</e><d>%</d><c>}</c></span></div>
</a>
</h4>
</div>
<div id="collapseThree5" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingThree5">
    <div class="panel-body">
    <div class="libreHub-codeboard">
    <script type=text/javascript>
var _forRowLibreJson = {
        "styles": [
            {"CharColor":"#0056ff","CharShadowed":true, "ParaAdjust":"left", "CharFontName":"Liberation Mono"},
            {"CharColor": "#ff00ff", "CharShadowed":false, "ParaAdjust":"left", "CharFontName":"Liberation Mono"},
            {"CharColor":"#07c516", "CharShadowed":true, "ParaAdjust":"left", "CharFontName":"Liberation Mono"}
        ],
        "content": [{
            "text": [
                "\\n{","%","forRow"," item"," in", " [1, ':-)', 1.5] ","%","}\\n",
                "\\tcontent \${","item","}"," \${","index","}"," \${","length","}"," \${","ilength","}"," \${","first","}"," \${","last","}",
                "\\n{","%","endForRow","%","}\\n"
            ],
            "style": [-1,1,0,2, 1, 2,1,-1,  -1,2,-1, -1,2,-1, -1,2,-1, -1,2,-1, -1,2,-1, -1,2,-1,  -1,1,0,1,-1]
        }]
    }
    </script>
    <div draggable="true" ondragstart="libreHub.dragStart(event, _forRowLibreJson);" class="libreHub-hlted libreHub-draggable">
    <c>{</c><d>%</d><e>forRow</e><i> item</i><e> in</e><i> [1, ':-)', 1.5] </i><d>%</d><c>}</c>
<p>content \${<i>item</i>} \${<i>index</i>} \${<i>length</i>} \${<i>ilength</i>} \${<i>first</i>} \${<i>last</i>}</p>
<c>{</c><d>%</d><e>endForRow</e><d>%</d><c>}</c>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>

</div>
<div class="libreHub-search">
    <table><tbody>
    <tr><td><input type="text" placeholder="Search..." class="libreHub-si"></td><td><button type="button" class="libreHub-si">Search</button></td></tr>
    <tr><td><input type="text" placeholder="Replace..." class="libreHub-ri"></td><td><button type="button" class="libreHub-ri">Replace</button></td></tr>
    </tbody></table>
    <div class="libreHub-search-result">
    </div>
    </div>
    </div>
    </div>
    </div>
    </div>
    </div>
    </div>
    </div>`

export default libreHub
